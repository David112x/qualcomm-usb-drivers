// 940d94cd9f1583be62c04f05325f9a16 Generated file. Do not edit.
// File created by WPP compiler version 10.0.15063-Wed Feb 18 19:04:42 2037
// from template km-default.tpl

//
// Define anything which is needed but missing from 
// older versions of the DDK.
//
#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#if !defined(TRACE_LEVEL_NONE)
  #define TRACE_LEVEL_NONE        0  
  #define TRACE_LEVEL_CRITICAL    1  
  #define TRACE_LEVEL_FATAL       1  
  #define TRACE_LEVEL_ERROR       2  
  #define TRACE_LEVEL_WARNING     3  
  #define TRACE_LEVEL_INFORMATION 4  
  #define TRACE_LEVEL_VERBOSE     5  
  #define TRACE_LEVEL_RESERVED6   6
  #define TRACE_LEVEL_RESERVED7   7
  #define TRACE_LEVEL_RESERVED8   8
  #define TRACE_LEVEL_RESERVED9   9
#endif
    
#if !defined(TRACE_INFORMATION_CLASS_DEFINE)
typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass,
    TraceHandleClass,
    TraceEnableFlagsClass,
    TraceEnableLevelClass,
    GlobalLoggerHandleClass,
    EventLoggerHandleClass,
    AllLoggerHandlesClass,
    TraceHandleByNameClass
} TRACE_INFORMATION_CLASS;
  
#define TRACE_MESSAGE_SEQUENCE               1
#define TRACE_MESSAGE_GUID                   2         
#define TRACE_MESSAGE_COMPONENTID            4           
#define TRACE_MESSAGE_TIMESTAMP              8         
#define TRACE_MESSAGE_PERFORMANCE_TIMESTAMP 16  
#define TRACE_MESSAGE_SYSTEMINFO            32          

#endif // !defined(TRACE_INFORMATION_CLASS_DEFINE)


//
// Advanced tracing APIs (XP and later) will be indirectly called.
//
typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE USBUTL_c

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 
#define WPP_THIS_FILE USBUTL_c

#if defined(__cplusplus)
extern "C" {
#endif


typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext, 
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;


#if !defined(_NTRTL_)
#if !defined(_NTHAL_) 
      // fake RTL_TIME_ZONE_INFORMATION //
    typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#   define _WMIKM_  
#endif
#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );
#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif
#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);
    

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{

    if (WppTraceWinXP == WPPTraceSuite) {

        ULONG ReturnLength ;
        LONG Status ;
        ULONG64 TraceHandle ;
        UNICODE_STRING  Buffer  ;
           
        RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

        Status = pfnWppQueryTraceInformation(
                                            TraceHandleByNameClass,
                                            (PVOID)&TraceHandle,
                                            sizeof(TraceHandle),
                                            &ReturnLength,
                                            (PVOID)&Buffer
                                            );
        if (Status != STATUS_SUCCESS) {
           return (ULONG64)0 ;
        }
        
        return TraceHandle ;
    } else {
        return (ULONG64) 0 ;
    }
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen; 
    UCHAR                               Level; 
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER    
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif    
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
// 
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below 
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ __int64 Logger, 
    _In_ BOOLEAN Enable, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level);   

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_CONTROL_GUIDS)  && defined(WPP_ETW_PROVIDER)
#define WPP_NO_CONTROL_GUIDS
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) }; 
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif


#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


#if ENABLE_WPP_RECORDER
// template tracemacro-ifr.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1107
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1129
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1139
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1168
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1240
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1316
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1609
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1643
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1654
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1773
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1906
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1986
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c2038
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c2073
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c675
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c692
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c710
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c729
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c747
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c766
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c814
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c853
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c954
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c965
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c977
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c995
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1107_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1107_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1107
    #define WPP_ANNOTATE_USBUTL_c1107 WPP_ANNOTATE_USBUTL_c1107_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1107 WPP_ANNOTATE_USBUTL_c1107_FINAL("TMF:", "USBUTL.c", "USBUTL_c1107", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1129_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d! NUL\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1129_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d! NUL\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1129
    #define WPP_ANNOTATE_USBUTL_c1129 WPP_ANNOTATE_USBUTL_c1129_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1129 WPP_ANNOTATE_USBUTL_c1129_FINAL("TMF:", "USBUTL.c", "USBUTL_c1129", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1139_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0<%10!s!> %11!s!: (Cx 0x%12!p!)\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1139_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0<%10!s!> %11!s!: (Cx 0x%12!p!)\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1139
    #define WPP_ANNOTATE_USBUTL_c1139 WPP_ANNOTATE_USBUTL_c1139_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1139 WPP_ANNOTATE_USBUTL_c1139_FINAL("TMF:", "USBUTL.c", "USBUTL_c1139", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1168_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0<%10!s!> PurgeQueue: Cxled %11!s! 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1168_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0<%10!s!> PurgeQueue: Cxled %11!s! 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1168
    #define WPP_ANNOTATE_USBUTL_c1168 WPP_ANNOTATE_USBUTL_c1168_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1168 WPP_ANNOTATE_USBUTL_c1168_FINAL("TMF:", "USBUTL.c", "USBUTL_c1168", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1240
    #define WPP_ANNOTATE_USBUTL_c1240 WPP_ANNOTATE_USBUTL_c1240_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1240 WPP_ANNOTATE_USBUTL_c1240_FINAL("TMF:", "USBUTL.c", "USBUTL_c1240", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"Cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1316_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1316_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1316
    #define WPP_ANNOTATE_USBUTL_c1316 WPP_ANNOTATE_USBUTL_c1316_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1316 WPP_ANNOTATE_USBUTL_c1316_FINAL("TMF:", "USBUTL.c", "USBUTL_c1316", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"Cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1609_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1609_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1609
    #define WPP_ANNOTATE_USBUTL_c1609 WPP_ANNOTATE_USBUTL_c1609_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1609 WPP_ANNOTATE_USBUTL_c1609_FINAL("TMF:", "USBUTL.c", "USBUTL_c1609", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1643_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1643_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1643
    #define WPP_ANNOTATE_USBUTL_c1643 WPP_ANNOTATE_USBUTL_c1643_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1643 WPP_ANNOTATE_USBUTL_c1643_FINAL("TMF:", "USBUTL.c", "USBUTL_c1643", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1654_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=DbgLevel", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1654_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=DbgLevel", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1654
    #define WPP_ANNOTATE_USBUTL_c1654 WPP_ANNOTATE_USBUTL_c1654_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1654 WPP_ANNOTATE_USBUTL_c1654_FINAL("TMF:", "USBUTL.c", "USBUTL_c1654", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1773_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0<%10!s!> CIRP: (Cpg 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1773_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0<%10!s!> CIRP: (Cpg 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1773
    #define WPP_ANNOTATE_USBUTL_c1773 WPP_ANNOTATE_USBUTL_c1773_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1773 WPP_ANNOTATE_USBUTL_c1773_FINAL("TMF:", "USBUTL.c", "USBUTL_c1773", L"{", L"pDevExt->PortName, ItemString -- 10" , L"STATUS_SUCCESS, ItemLong -- 11" , L"pPurgeIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1906_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1906_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1906
    #define WPP_ANNOTATE_USBUTL_c1906 WPP_ANNOTATE_USBUTL_c1906_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1906 WPP_ANNOTATE_USBUTL_c1906_FINAL("TMF:", "USBUTL.c", "USBUTL_c1906", L"{", L"gDeviceName, ItemString -- 10" , L"Cookie, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1986_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1986_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1986
    #define WPP_ANNOTATE_USBUTL_c1986 WPP_ANNOTATE_USBUTL_c1986_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1986 WPP_ANNOTATE_USBUTL_c1986_FINAL("TMF:", "USBUTL.c", "USBUTL_c1986", L"{", L"gDeviceName, ItemString -- 10" , L"Cookie, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c2038_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> USBUTL_GetServiceRegValue: regpath %11!s!, parname %12!s! and parvalue %13!x!\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c2038_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> USBUTL_GetServiceRegValue: regpath %11!s!, parname %12!s! and parvalue %13!x!\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c2038
    #define WPP_ANNOTATE_USBUTL_c2038 WPP_ANNOTATE_USBUTL_c2038_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemString -- 12" , L"Arg, ItemLong -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c2038 WPP_ANNOTATE_USBUTL_c2038_FINAL("TMF:", "USBUTL.c", "USBUTL_c2038", L"{", L"gDeviceName, ItemString -- 10" , L"(char *)ServiceName, ItemString -- 11" , L"(char *)ParName, ItemString -- 12" , L"*ParValue, ItemLong -- 13" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c2073_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> USBUTL_GetServiceRegValue: ERR(0x%11!x!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c2073_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> USBUTL_GetServiceRegValue: ERR(0x%11!x!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c2073
    #define WPP_ANNOTATE_USBUTL_c2073 WPP_ANNOTATE_USBUTL_c2073_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c2073 WPP_ANNOTATE_USBUTL_c2073_FINAL("TMF:", "USBUTL.c", "USBUTL_c2073", L"{", L"gDeviceName, ItemString -- 10" , L"status, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c675_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0<%10!s!> NO_MEM - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c675_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0<%10!s!> NO_MEM - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c675
    #define WPP_ANNOTATE_USBUTL_c675 WPP_ANNOTATE_USBUTL_c675_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c675 WPP_ANNOTATE_USBUTL_c675_FINAL("TMF:", "USBUTL.c", "USBUTL_c675", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c692_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0<%10!s!> NO_MEM - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c692_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0<%10!s!> NO_MEM - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c692
    #define WPP_ANNOTATE_USBUTL_c692 WPP_ANNOTATE_USBUTL_c692_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c692 WPP_ANNOTATE_USBUTL_c692_FINAL("TMF:", "USBUTL.c", "USBUTL_c692", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c710_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0<%10!s!> Error - ucTxTmp\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c710_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0<%10!s!> Error - ucTxTmp\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c710
    #define WPP_ANNOTATE_USBUTL_c710 WPP_ANNOTATE_USBUTL_c710_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c710 WPP_ANNOTATE_USBUTL_c710_FINAL("TMF:", "USBUTL.c", "USBUTL_c710", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c729_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0<%10!s!> SMALL_BUF - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c729_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0<%10!s!> SMALL_BUF - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c729
    #define WPP_ANNOTATE_USBUTL_c729 WPP_ANNOTATE_USBUTL_c729_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c729 WPP_ANNOTATE_USBUTL_c729_FINAL("TMF:", "USBUTL.c", "USBUTL_c729", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c747_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0<%10!s!> Error - ucRxTmp\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c747_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0<%10!s!> Error - ucRxTmp\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c747
    #define WPP_ANNOTATE_USBUTL_c747 WPP_ANNOTATE_USBUTL_c747_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c747 WPP_ANNOTATE_USBUTL_c747_FINAL("TMF:", "USBUTL.c", "USBUTL_c747", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c766_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0<%10!s!> SMALL_BUF - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c766_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0<%10!s!> SMALL_BUF - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c766
    #define WPP_ANNOTATE_USBUTL_c766 WPP_ANNOTATE_USBUTL_c766_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c766 WPP_ANNOTATE_USBUTL_c766_FINAL("TMF:", "USBUTL.c", "USBUTL_c766", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c814_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> File creation failure: TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c814_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> File creation failure: TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c814
    #define WPP_ANNOTATE_USBUTL_c814 WPP_ANNOTATE_USBUTL_c814_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c814 WPP_ANNOTATE_USBUTL_c814_FINAL("TMF:", "USBUTL.c", "USBUTL_c814", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c853_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> File creation failure: RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c853_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> File creation failure: RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c853
    #define WPP_ANNOTATE_USBUTL_c853 WPP_ANNOTATE_USBUTL_c853_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c853 WPP_ANNOTATE_USBUTL_c853_FINAL("TMF:", "USBUTL.c", "USBUTL_c853", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c954_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=debugLevel", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c954_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=debugLevel", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c954
    #define WPP_ANNOTATE_USBUTL_c954 WPP_ANNOTATE_USBUTL_c954_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c954 WPP_ANNOTATE_USBUTL_c954_FINAL("TMF:", "USBUTL.c", "USBUTL_c954", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c965_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> RIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p! RmlCount[0]=%14!u!\" //   FLAG=QCUSB_DBG_MASK_RIRP LEVEL=debugLevel", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c965_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> RIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p! RmlCount[0]=%14!u!\" //   FLAG=QCUSB_DBG_MASK_RIRP LEVEL=debugLevel", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c965
    #define WPP_ANNOTATE_USBUTL_c965 WPP_ANNOTATE_USBUTL_c965_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"Arg, ItemPtr -- 13" , L"Arg, ItemLong -- 14" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c965 WPP_ANNOTATE_USBUTL_c965_FINAL("TMF:", "USBUTL.c", "USBUTL_c965", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp->IoStatus.Information, ItemLong -- 12" , L"pIrp, ItemPtr -- 13" , L"pDevExt->Sts.lRmlCount[0], ItemLong -- 14" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c977_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> WIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p!\" //   FLAG=QCUSB_DBG_MASK_WIRP LEVEL=debugLevel", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c977_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> WIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p!\" //   FLAG=QCUSB_DBG_MASK_WIRP LEVEL=debugLevel", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c977
    #define WPP_ANNOTATE_USBUTL_c977 WPP_ANNOTATE_USBUTL_c977_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"Arg, ItemPtr -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c977 WPP_ANNOTATE_USBUTL_c977_FINAL("TMF:", "USBUTL.c", "USBUTL_c977", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp->IoStatus.Information, ItemLong -- 12" , L"pIrp, ItemPtr -- 13" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c995_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> UIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=debugLevel", __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c995_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> UIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=debugLevel", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c995
    #define WPP_ANNOTATE_USBUTL_c995 WPP_ANNOTATE_USBUTL_c995_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c995 WPP_ANNOTATE_USBUTL_c995_FINAL("TMF:", "USBUTL.c", "USBUTL_c995", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif

#define WPP_LOCAL_TraceGuids WPP_80b6eebac84d35abf3f487229c1457e2_Traceguids

#if 1
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x80b6eeba,0xc84d,0x35ab,{0xf3,0xf4,0x87,0x22,0x9c,0x14,0x57,0xe2}}, };
#endif

#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((SIZE_T)(_Size)),
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( ((_value)?wcslen(_value) + 1:5) * sizeof(WCHAR), (_value)?(_value):L"NULL" )
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x08" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x08, (_x)?(_x)->Buffer:L"NULL" )
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x04" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x04, (_x)?(_x)->Buffer:"NULL" )
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_ENABLE_FLAG_BIT)
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 )) 
#endif

#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def


//
// Generate the WPP_RECORDER_SP_s function    2
//
#ifndef WPP_RECORDER_SF_s_def
#       define WPP_RECORDER_SF_s_def
WPP_INLINE
VOID
WPP_RECORDER_SF_s(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_s_def


#ifndef WPP_SF_sD_def
#       define WPP_SF_sD_def
WPP_INLINE void WPP_SF_sD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0); }
#endif  // #ifndef WPP_SF_sD_def


//
// Generate the WPP_RECORDER_SP_sD function    2
//
#ifndef WPP_RECORDER_SF_sD_def
#       define WPP_RECORDER_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sD_def


#ifndef WPP_SF_sDlq_def
#       define WPP_SF_sDlq_def
WPP_INLINE void WPP_SF_sDlq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, signed long _a3, const void* _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4)  0); }
#endif  // #ifndef WPP_SF_sDlq_def


//
// Generate the WPP_RECORDER_SP_sDlq function    2
//
#ifndef WPP_RECORDER_SF_sDlq_def
#       define WPP_RECORDER_SF_sDlq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDlq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, unsigned int _a2, signed long _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sDlq_def


#ifndef WPP_SF_sDlqD_def
#       define WPP_SF_sDlqD_def
WPP_INLINE void WPP_SF_sDlqD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, signed long _a3, const void* _a4, unsigned int _a5)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4) WPP_LOGTYPEVAL(unsigned int,_a5)  0); }
#endif  // #ifndef WPP_SF_sDlqD_def


//
// Generate the WPP_RECORDER_SP_sDlqD function    2
//
#ifndef WPP_RECORDER_SF_sDlqD_def
#       define WPP_RECORDER_SF_sDlqD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDlqD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, unsigned int _a2, signed long _a3, const void* _a4, unsigned int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4) WPP_LOGTYPEVAL(unsigned int,_a5)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4) WPP_LOGTYPEVAL(unsigned int,_a5)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sDlqD_def


#ifndef WPP_SF_sDq_def
#       define WPP_SF_sDq_def
WPP_INLINE void WPP_SF_sDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_sDq_def


//
// Generate the WPP_RECORDER_SP_sDq function    2
//
#ifndef WPP_RECORDER_SF_sDq_def
#       define WPP_RECORDER_SF_sDq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, unsigned int _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sDq_def


#ifndef WPP_SF_sd_def
#       define WPP_SF_sd_def
WPP_INLINE void WPP_SF_sd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, signed int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int,_a2)  0); }
#endif  // #ifndef WPP_SF_sd_def


//
// Generate the WPP_RECORDER_SP_sd function    2
//
#ifndef WPP_RECORDER_SF_sd_def
#       define WPP_RECORDER_SF_sd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, signed int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int,_a2)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int,_a2)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sd_def


#ifndef WPP_SF_ssd_def
#       define WPP_SF_ssd_def
WPP_INLINE void WPP_SF_ssd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, signed int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(signed int,_a3)  0); }
#endif  // #ifndef WPP_SF_ssd_def


//
// Generate the WPP_RECORDER_SP_ssd function    2
//
#ifndef WPP_RECORDER_SF_ssd_def
#       define WPP_RECORDER_SF_ssd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_ssd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const char* _a2, signed int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(signed int,_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(signed int,_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_ssd_def


#ifndef WPP_SF_ssq_def
#       define WPP_SF_ssq_def
WPP_INLINE void WPP_SF_ssq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_ssq_def


//
// Generate the WPP_RECORDER_SP_ssq function    2
//
#ifndef WPP_RECORDER_SF_ssq_def
#       define WPP_RECORDER_SF_ssq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_ssq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const char* _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_ssq_def


#ifndef WPP_SF_sssD_def
#       define WPP_SF_sssD_def
WPP_INLINE void WPP_SF_sssD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const char* _a3, unsigned int _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned int,_a4)  0); }
#endif  // #ifndef WPP_SF_sssD_def


//
// Generate the WPP_RECORDER_SP_sssD function    2
//
#ifndef WPP_RECORDER_SF_sssD_def
#       define WPP_RECORDER_SF_sssD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sssD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const char* _a2, const char* _a3, unsigned int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned int,_a4)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned int,_a4)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sssD_def


#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif


#ifdef WPP_DEBUG
#else
#endif


#ifdef WPP_DEBUG
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1107(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1107) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 22,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1129(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1129) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 23,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1139(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1139) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 24,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1168(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1168) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 25,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1240) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 26,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1316(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1316) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 27,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1609(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1609) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 28,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1643(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1643) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 29,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1654(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1654) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1773(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1773) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 31,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1906(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1906) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sd(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1986(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1986) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sd(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2038(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2038) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sssD(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 34,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2073(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2073) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sD(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 35,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c675(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c675) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 10,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c692(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c692) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 11,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c710(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c710) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c729(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c729) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 13,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c747(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c747) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c766(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c766) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c814(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c814) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c853(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c853) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c954(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c954) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 18,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c965(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c965) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDlqD(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 19,WPP_LOCAL_TraceGuids+0 WPP_R01234 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c977(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c977) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDlq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 20,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c995(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c995) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 21,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#else
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1107(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1107) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 22,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1129(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1129) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 23,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1139(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1139) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 24,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1168(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1168) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 25,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1240) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 26,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1316(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1316) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_ssd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 27,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1609(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1609) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 28,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1643(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1643) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 29,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1654(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1654) \
            (( \
                WPP_RECORDER_X_XFLAG_XLEVEL_FILTER(X, XFLAG, XLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_X_XFLAG_XLEVEL_ARGS(X, XFLAG, XLEVEL), \
                                 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1773(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1773) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 31,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1906(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1906) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sd(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1986(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1986) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sd(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2038(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2038) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sssD(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 34,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2073(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2073) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sD(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 35,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c675(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c675) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 10,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c692(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c692) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 11,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c710(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c710) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c729(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c729) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 13,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c747(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c747) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c766(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c766) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c814(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c814) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c853(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c853) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c954(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c954) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 18,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c965(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c965) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDlqD(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 19,WPP_LOCAL_TraceGuids+0 WPP_R01234 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c977(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c977) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDlq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 20,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c995(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c995) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sDq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 21,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#endif



#if defined(__cplusplus)
};
#endif


#else
// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1107
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1129
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1139
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1168
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1240
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1316
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1609
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1643
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1654
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1773
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1906
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c1986
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c2038
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c2073
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c675
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c692
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c710
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c729
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c747
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c766
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c814
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c853
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c954
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c965
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c977
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_USBUTL_c995
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else
#define WPP_FUNC_NAME
#endif

#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1107_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1107_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1107
    #define WPP_ANNOTATE_USBUTL_c1107 WPP_ANNOTATE_USBUTL_c1107_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1107 WPP_ANNOTATE_USBUTL_c1107_FINAL("TMF:", "USBUTL.c", "USBUTL_c1107", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1129_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d! NUL\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1129_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0<%10!s!> PurgeQueue: %11!s! - %12!d! NUL\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1129
    #define WPP_ANNOTATE_USBUTL_c1129 WPP_ANNOTATE_USBUTL_c1129_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1129 WPP_ANNOTATE_USBUTL_c1129_FINAL("TMF:", "USBUTL.c", "USBUTL_c1129", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1139_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0<%10!s!> %11!s!: (Cx 0x%12!p!)\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1139_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0<%10!s!> %11!s!: (Cx 0x%12!p!)\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1139
    #define WPP_ANNOTATE_USBUTL_c1139 WPP_ANNOTATE_USBUTL_c1139_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1139 WPP_ANNOTATE_USBUTL_c1139_FINAL("TMF:", "USBUTL.c", "USBUTL_c1139", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1168_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0<%10!s!> PurgeQueue: Cxled %11!s! 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1168_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0<%10!s!> PurgeQueue: Cxled %11!s! 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1168
    #define WPP_ANNOTATE_USBUTL_c1168 WPP_ANNOTATE_USBUTL_c1168_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1168 WPP_ANNOTATE_USBUTL_c1168_FINAL("TMF:", "USBUTL.c", "USBUTL_c1168", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1240
    #define WPP_ANNOTATE_USBUTL_c1240 WPP_ANNOTATE_USBUTL_c1240_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1240 WPP_ANNOTATE_USBUTL_c1240_FINAL("TMF:", "USBUTL.c", "USBUTL_c1240", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"Cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1316_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1316_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0<%10!s!> IsIrpInQueue: %11!s! - %12!d!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1316
    #define WPP_ANNOTATE_USBUTL_c1316 WPP_ANNOTATE_USBUTL_c1316_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1316 WPP_ANNOTATE_USBUTL_c1316_FINAL("TMF:", "USBUTL.c", "USBUTL_c1316", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pcIrpName, ItemString -- 11" , L"Cookie, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1609_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1609_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1609
    #define WPP_ANNOTATE_USBUTL_c1609 WPP_ANNOTATE_USBUTL_c1609_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1609 WPP_ANNOTATE_USBUTL_c1609_FINAL("TMF:", "USBUTL.c", "USBUTL_c1609", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1643_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1643_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=QCUSB_DBG_LEVEL_VERBOSE" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1643
    #define WPP_ANNOTATE_USBUTL_c1643 WPP_ANNOTATE_USBUTL_c1643_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1643 WPP_ANNOTATE_USBUTL_c1643_FINAL("TMF:", "USBUTL.c", "USBUTL_c1643", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1654_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=DbgLevel" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1654_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   X=x XFLAG=DbgMask XLEVEL=DbgLevel" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1654
    #define WPP_ANNOTATE_USBUTL_c1654 WPP_ANNOTATE_USBUTL_c1654_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1654 WPP_ANNOTATE_USBUTL_c1654_FINAL("TMF:", "USBUTL.c", "USBUTL_c1654", L"{", L"buf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1773_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0<%10!s!> CIRP: (Cpg 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1773_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0<%10!s!> CIRP: (Cpg 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=QCUSB_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1773
    #define WPP_ANNOTATE_USBUTL_c1773 WPP_ANNOTATE_USBUTL_c1773_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1773 WPP_ANNOTATE_USBUTL_c1773_FINAL("TMF:", "USBUTL.c", "USBUTL_c1773", L"{", L"pDevExt->PortName, ItemString -- 10" , L"STATUS_SUCCESS, ItemLong -- 11" , L"pPurgeIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1906_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1906_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1906
    #define WPP_ANNOTATE_USBUTL_c1906 WPP_ANNOTATE_USBUTL_c1906_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1906 WPP_ANNOTATE_USBUTL_c1906_FINAL("TMF:", "USBUTL.c", "USBUTL_c1906", L"{", L"gDeviceName, ItemString -- 10" , L"Cookie, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c1986_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c1986_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> CfgSetStr: reg ERR(%11!d!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c1986
    #define WPP_ANNOTATE_USBUTL_c1986 WPP_ANNOTATE_USBUTL_c1986_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c1986 WPP_ANNOTATE_USBUTL_c1986_FINAL("TMF:", "USBUTL.c", "USBUTL_c1986", L"{", L"gDeviceName, ItemString -- 10" , L"Cookie, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c2038_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> USBUTL_GetServiceRegValue: regpath %11!s!, parname %12!s! and parvalue %13!x!\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c2038_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> USBUTL_GetServiceRegValue: regpath %11!s!, parname %12!s! and parvalue %13!x!\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c2038
    #define WPP_ANNOTATE_USBUTL_c2038 WPP_ANNOTATE_USBUTL_c2038_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemString -- 12" , L"Arg, ItemLong -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c2038 WPP_ANNOTATE_USBUTL_c2038_FINAL("TMF:", "USBUTL.c", "USBUTL_c2038", L"{", L"gDeviceName, ItemString -- 10" , L"(char *)ServiceName, ItemString -- 11" , L"(char *)ParName, ItemString -- 12" , L"*ParValue, ItemLong -- 13" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c2073_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> USBUTL_GetServiceRegValue: ERR(0x%11!x!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c2073_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> USBUTL_GetServiceRegValue: ERR(0x%11!x!)\" //   GFLAG=QCUSB_DBG_MASK_READ GLEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c2073
    #define WPP_ANNOTATE_USBUTL_c2073 WPP_ANNOTATE_USBUTL_c2073_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c2073 WPP_ANNOTATE_USBUTL_c2073_FINAL("TMF:", "USBUTL.c", "USBUTL_c2073", L"{", L"gDeviceName, ItemString -- 10" , L"status, ItemLong -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c675_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0<%10!s!> NO_MEM - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c675_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0<%10!s!> NO_MEM - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c675
    #define WPP_ANNOTATE_USBUTL_c675 WPP_ANNOTATE_USBUTL_c675_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c675 WPP_ANNOTATE_USBUTL_c675_FINAL("TMF:", "USBUTL.c", "USBUTL_c675", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c692_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0<%10!s!> NO_MEM - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c692_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0<%10!s!> NO_MEM - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c692
    #define WPP_ANNOTATE_USBUTL_c692 WPP_ANNOTATE_USBUTL_c692_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c692 WPP_ANNOTATE_USBUTL_c692_FINAL("TMF:", "USBUTL.c", "USBUTL_c692", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c710_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0<%10!s!> Error - ucTxTmp\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c710_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0<%10!s!> Error - ucTxTmp\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c710
    #define WPP_ANNOTATE_USBUTL_c710 WPP_ANNOTATE_USBUTL_c710_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c710 WPP_ANNOTATE_USBUTL_c710_FINAL("TMF:", "USBUTL.c", "USBUTL_c710", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c729_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0<%10!s!> SMALL_BUF - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c729_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0<%10!s!> SMALL_BUF - TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c729
    #define WPP_ANNOTATE_USBUTL_c729 WPP_ANNOTATE_USBUTL_c729_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c729 WPP_ANNOTATE_USBUTL_c729_FINAL("TMF:", "USBUTL.c", "USBUTL_c729", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c747_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0<%10!s!> Error - ucRxTmp\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c747_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0<%10!s!> Error - ucRxTmp\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c747
    #define WPP_ANNOTATE_USBUTL_c747 WPP_ANNOTATE_USBUTL_c747_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c747 WPP_ANNOTATE_USBUTL_c747_FINAL("TMF:", "USBUTL.c", "USBUTL_c747", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c766_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0<%10!s!> SMALL_BUF - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c766_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0<%10!s!> SMALL_BUF - RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c766
    #define WPP_ANNOTATE_USBUTL_c766 WPP_ANNOTATE_USBUTL_c766_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c766 WPP_ANNOTATE_USBUTL_c766_FINAL("TMF:", "USBUTL.c", "USBUTL_c766", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c814_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> File creation failure: TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c814_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> File creation failure: TxFileName\" //   FLAG=QCUSB_DBG_MASK_WRITE LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c814
    #define WPP_ANNOTATE_USBUTL_c814 WPP_ANNOTATE_USBUTL_c814_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c814 WPP_ANNOTATE_USBUTL_c814_FINAL("TMF:", "USBUTL.c", "USBUTL_c814", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c853_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> File creation failure: RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c853_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> File creation failure: RxFileName\" //   FLAG=QCUSB_DBG_MASK_READ LEVEL=QCUSB_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c853
    #define WPP_ANNOTATE_USBUTL_c853 WPP_ANNOTATE_USBUTL_c853_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c853 WPP_ANNOTATE_USBUTL_c853_FINAL("TMF:", "USBUTL.c", "USBUTL_c853", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c954_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c954_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c954
    #define WPP_ANNOTATE_USBUTL_c954 WPP_ANNOTATE_USBUTL_c954_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c954 WPP_ANNOTATE_USBUTL_c954_FINAL("TMF:", "USBUTL.c", "USBUTL_c954", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c965_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> RIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p! RmlCount[0]=%14!u!\" //   FLAG=QCUSB_DBG_MASK_RIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c965_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> RIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p! RmlCount[0]=%14!u!\" //   FLAG=QCUSB_DBG_MASK_RIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c965
    #define WPP_ANNOTATE_USBUTL_c965 WPP_ANNOTATE_USBUTL_c965_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"Arg, ItemPtr -- 13" , L"Arg, ItemLong -- 14" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c965 WPP_ANNOTATE_USBUTL_c965_FINAL("TMF:", "USBUTL.c", "USBUTL_c965", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp->IoStatus.Information, ItemLong -- 12" , L"pIrp, ItemPtr -- 13" , L"pDevExt->Sts.lRmlCount[0], ItemLong -- 14" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c977_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> WIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p!\" //   FLAG=QCUSB_DBG_MASK_WIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c977_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> WIRP (Cq 0x%11!x!/%12!ld!B) 0x%13!p!\" //   FLAG=QCUSB_DBG_MASK_WIRP LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c977
    #define WPP_ANNOTATE_USBUTL_c977 WPP_ANNOTATE_USBUTL_c977_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemLong -- 12" , L"Arg, ItemPtr -- 13" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c977 WPP_ANNOTATE_USBUTL_c977_FINAL("TMF:", "USBUTL.c", "USBUTL_c977", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp->IoStatus.Information, ItemLong -- 12" , L"pIrp, ItemPtr -- 13" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_USBUTL_c995_FINAL(P, File, Name, ...)    __annotation(L ## P, L"80b6eeba-c84d-35ab-f3f4-87229c1457e2 ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> UIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_USBUTL_c995_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"ndis // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> UIRP (Cq 0x%11!x!) 0x%12!p!\" //   FLAG=QCUSB_DBG_MASK_CONTROL LEVEL=debugLevel" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_USBUTL_c995
    #define WPP_ANNOTATE_USBUTL_c995 WPP_ANNOTATE_USBUTL_c995_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemLong -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_USBUTL_c995 WPP_ANNOTATE_USBUTL_c995_FINAL("TMF:", "USBUTL.c", "USBUTL_c995", L"{", L"pDevExt->PortName, ItemString -- 10" , L"pIrp->IoStatus.Status, ItemLong -- 11" , L"pIrp, ItemPtr -- 12" , L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif


#if 1
#if !defined(WPP_USER_MSG_GUID)

#define WPP_LOCAL_TraceGuids WPP_80b6eebac84d35abf3f487229c1457e2_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x80b6eeba,0xc84d,0x35ab,{0xf3,0xf4,0x87,0x22,0x9c,0x14,0x57,0xe2}}, };

#else

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#endif
#endif


#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif

#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( ((_value)?wcslen(_value) + 1:5) * sizeof(WCHAR), (_value)?(_value):L"NULL" )
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x08" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x08, (_x)?(_x)->Buffer:L"NULL" )
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x04" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x04, (_x)?(_x)->Buffer:"NULL" )
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_CHECK_INIT)
# define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && 
#endif


#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def
#ifndef WPP_SF_sD_def
#       define WPP_SF_sD_def
WPP_INLINE void WPP_SF_sD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2)  0); }
#endif  // #ifndef WPP_SF_sD_def
#ifndef WPP_SF_sDlq_def
#       define WPP_SF_sDlq_def
WPP_INLINE void WPP_SF_sDlq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, signed long _a3, const void* _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4)  0); }
#endif  // #ifndef WPP_SF_sDlq_def
#ifndef WPP_SF_sDlqD_def
#       define WPP_SF_sDlqD_def
WPP_INLINE void WPP_SF_sDlqD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, signed long _a3, const void* _a4, unsigned int _a5)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(signed long,_a3) WPP_LOGTYPEVAL(const void*,_a4) WPP_LOGTYPEVAL(unsigned int,_a5)  0); }
#endif  // #ifndef WPP_SF_sDlqD_def
#ifndef WPP_SF_sDq_def
#       define WPP_SF_sDq_def
WPP_INLINE void WPP_SF_sDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, unsigned int _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_sDq_def
#ifndef WPP_SF_sd_def
#       define WPP_SF_sd_def
WPP_INLINE void WPP_SF_sd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, signed int _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(signed int,_a2)  0); }
#endif  // #ifndef WPP_SF_sd_def
#ifndef WPP_SF_ssd_def
#       define WPP_SF_ssd_def
WPP_INLINE void WPP_SF_ssd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, signed int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(signed int,_a3)  0); }
#endif  // #ifndef WPP_SF_ssd_def
#ifndef WPP_SF_ssq_def
#       define WPP_SF_ssq_def
WPP_INLINE void WPP_SF_ssq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_ssq_def
#ifndef WPP_SF_sssD_def
#       define WPP_SF_sssD_def
WPP_INLINE void WPP_SF_sssD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const char* _a3, unsigned int _a4)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3) WPP_LOGTYPEVAL(unsigned int,_a4)  0); }
#endif  // #ifndef WPP_SF_sssD_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif

#ifndef WPP_LOG_ALWAYS
#  define WPP_LOG_ALWAYS(...)
#endif      

#ifdef WPP_DEBUG
#else
#endif


#ifdef WPP_DEBUG
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1107(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1107) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 22,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1129(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1129) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 23,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1139(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1139) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 24,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1168(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1168) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 25,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1240) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 26,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1316(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1316) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 27,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1609(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL),MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1609) \
            (( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)? \
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 28,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1643(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL),MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1643) \
            (( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)? \
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 29,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1654(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL),MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1654) \
            (( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)? \
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1773(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1773) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 31,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1906(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1906) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_sd(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1986(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1986) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_sd(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2038(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2038) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_sssD(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 34,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2073(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2073) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_sD(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 35,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c675(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c675) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 10,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c692(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c692) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 11,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c710(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c710) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c729(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c729) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 13,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c747(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c747) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c766(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c766) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c814(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c814) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c853(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c853) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c954(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c954) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 18,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c965(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c965) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sDlqD(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 19,WPP_LOCAL_TraceGuids+0 WPP_R01234 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c977(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c977) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sDlq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 20,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c995(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c995) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 21,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#else
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1107(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1107) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 22,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1129(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1129) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 23,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1139(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1139) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 24,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1168(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1168) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 25,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1240) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 26,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1316(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1316) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_ssd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 27,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1609(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL), MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1609) \
            ( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)?\
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 28,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1643(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL), MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1643) \
            ( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)?\
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 29,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_X_XFLAG_XLEVEL_POST
#  define WPP_X_XFLAG_XLEVEL_POST(X,XFLAG,XLEVEL)
#endif
#ifndef WPP_X_XFLAG_XLEVEL_PRE
#  define WPP_X_XFLAG_XLEVEL_PRE(X,XFLAG,XLEVEL)
#endif
#define WPP_CALL_USBUTL_c1654(X, XFLAG, XLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_X_XFLAG_XLEVEL(X, XFLAG, XLEVEL), MSGARGS)\
            WPP_X_XFLAG_XLEVEL_PRE(X, XFLAG, XLEVEL) \
            WPP_ANNOTATE(USBUTL_c1654) \
            ( \
                WPP_CHECK_INIT  WPP_X_XFLAG_XLEVEL_ENABLED(X, XFLAG, XLEVEL)?\
                WPP_SF_s(WPP_X_XFLAG_XLEVEL_LOGGER(X, XFLAG, XLEVEL) 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_X_XFLAG_XLEVEL_POST(X, XFLAG, XLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c1773(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c1773) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 31,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1906(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1906) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_sd(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c1986(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c1986) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_sd(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2038(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2038) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_sssD(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 34,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_USBUTL_c2073(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(USBUTL_c2073) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_sD(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 35,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c675(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c675) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 10,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c692(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c692) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 11,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c710(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c710) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c729(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c729) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 13,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c747(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c747) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c766(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c766) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c814(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c814) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c853(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c853) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c954(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c954) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 18,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c965(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c965) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sDlqD(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 19,WPP_LOCAL_TraceGuids+0 WPP_R01234 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c977(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c977) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sDlq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 20,WPP_LOCAL_TraceGuids+0 WPP_R0123 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_USBUTL_c995(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(USBUTL_c995) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sDq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 21,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#endif



#if defined(__cplusplus)
};
#endif

#endif

//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DbgPrint
#define DbgPrint WPP_(CALL)
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef KdPrint
#define KdPrint(ARGS) WPP_(CALL) ARGS
#undef QCNET_DbgPrintG
#define QCNET_DbgPrintG(ARGS) WPP_(CALL) ARGS
// MsgArgs

#undef QCNET_DbgPrint
#define QCNET_DbgPrint(MASK, LEVEL,  MSGARGS) WPP_(CALL)(MASK, LEVEL,  MSGARGS)
#undef QCUSB_DbgPrint
#define QCUSB_DbgPrint(FLAG, LEVEL,  MSGARGS) WPP_(CALL)(FLAG, LEVEL,  MSGARGS)
#undef QCUSB_DbgPrintG
#define QCUSB_DbgPrintG(GFLAG, GLEVEL,  MSGARGS) WPP_(CALL)(GFLAG, GLEVEL,  MSGARGS)
#undef QCUSB_DbgPrintX
#define QCUSB_DbgPrintX(X, XFLAG, XLEVEL,  MSGARGS) WPP_(CALL)(X, XFLAG, XLEVEL,  MSGARGS)
#undef  WPP_R
#define WPP_R(MSG) 
#undef  WPP_R0
#define WPP_R0(MSG, a0) , a0
#undef  WPP_R01
#define WPP_R01(MSG, a0, a1) , a0, a1
#undef  WPP_R012
#define WPP_R012(MSG, a0, a1, a2) , a0, a1, a2
#undef  WPP_R0123
#define WPP_R0123(MSG, a0, a1, a2, a3) , a0, a1, a2, a3
#undef  WPP_R01234
#define WPP_R01234(MSG, a0, a1, a2, a3, a4) , a0, a1, a2, a3, a4
#undef  WPP_R012345
#define WPP_R012345(MSG, a0, a1, a2, a3, a4, a5) , a0, a1, a2, a3, a4, a5
#undef  WPP_R0123456
#define WPP_R0123456(MSG, a0, a1, a2, a3, a4, a5, a6) , a0, a1, a2, a3, a4, a5, a6
#undef  WPP_R01234567
#define WPP_R01234567(MSG, a0, a1, a2, a3, a4, a5, a6, a7) , a0, a1, a2, a3, a4, a5, a6, a7
#undef  WPP_R012345678
#define WPP_R012345678(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8) , a0, a1, a2, a3, a4, a5, a6, a7, a8
#undef  WPP_R0123456789
#define WPP_R0123456789(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9
#undef  WPP_R0123456789a
#define WPP_R0123456789a(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10
#undef  WPP_R0123456789abc
#define WPP_R0123456789abc(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12
#undef  WPP_R0a0b0c0d0e0f000102030405060708090a
#define WPP_R0a0b0c0d0e0f000102030405060708090a(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16
