// 42c7d855fc45dd48d8ca99eba745367a Generated file. Do not edit.
// File created by WPP compiler version 10.0.15063-Wed Feb 18 19:04:42 2037
// from template km-default.tpl

//
// Define anything which is needed but missing from 
// older versions of the DDK.
//
#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#if !defined(TRACE_LEVEL_NONE)
  #define TRACE_LEVEL_NONE        0  
  #define TRACE_LEVEL_CRITICAL    1  
  #define TRACE_LEVEL_FATAL       1  
  #define TRACE_LEVEL_ERROR       2  
  #define TRACE_LEVEL_WARNING     3  
  #define TRACE_LEVEL_INFORMATION 4  
  #define TRACE_LEVEL_VERBOSE     5  
  #define TRACE_LEVEL_RESERVED6   6
  #define TRACE_LEVEL_RESERVED7   7
  #define TRACE_LEVEL_RESERVED8   8
  #define TRACE_LEVEL_RESERVED9   9
#endif
    
#if !defined(TRACE_INFORMATION_CLASS_DEFINE)
typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass,
    TraceHandleClass,
    TraceEnableFlagsClass,
    TraceEnableLevelClass,
    GlobalLoggerHandleClass,
    EventLoggerHandleClass,
    AllLoggerHandlesClass,
    TraceHandleByNameClass
} TRACE_INFORMATION_CLASS;
  
#define TRACE_MESSAGE_SEQUENCE               1
#define TRACE_MESSAGE_GUID                   2         
#define TRACE_MESSAGE_COMPONENTID            4           
#define TRACE_MESSAGE_TIMESTAMP              8         
#define TRACE_MESSAGE_PERFORMANCE_TIMESTAMP 16  
#define TRACE_MESSAGE_SYSTEMINFO            32          

#endif // !defined(TRACE_INFORMATION_CLASS_DEFINE)


//
// Advanced tracing APIs (XP and later) will be indirectly called.
//
typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE QCMAIN_c

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 
#define WPP_THIS_FILE QCMAIN_c

#if defined(__cplusplus)
extern "C" {
#endif


typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext, 
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;


#if !defined(_NTRTL_)
#if !defined(_NTHAL_) 
      // fake RTL_TIME_ZONE_INFORMATION //
    typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#   define _WMIKM_  
#endif
#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );
#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif
#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);
    

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{

    if (WppTraceWinXP == WPPTraceSuite) {

        ULONG ReturnLength ;
        LONG Status ;
        ULONG64 TraceHandle ;
        UNICODE_STRING  Buffer  ;
           
        RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

        Status = pfnWppQueryTraceInformation(
                                            TraceHandleByNameClass,
                                            (PVOID)&TraceHandle,
                                            sizeof(TraceHandle),
                                            &ReturnLength,
                                            (PVOID)&Buffer
                                            );
        if (Status != STATUS_SUCCESS) {
           return (ULONG64)0 ;
        }
        
        return TraceHandle ;
    } else {
        return (ULONG64) 0 ;
    }
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen; 
    UCHAR                               Level; 
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER    
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif    
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
// 
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below 
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,   
    _In_ __int64 Logger, 
    _In_ BOOLEAN Enable, 
    _In_ ULONG Flags,    
    _In_ UCHAR Level);   

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_CONTROL_GUIDS)  && defined(WPP_ETW_PROVIDER)
#define WPP_NO_CONTROL_GUIDS
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) }; 
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif


#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


#if ENABLE_WPP_RECORDER
// template tracemacro-ifr.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1191
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1200
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c122
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1222
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1240
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1268
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1284
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1303
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1347
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c159
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c166
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c173
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c190
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c230
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c269
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c308
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c363
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c378
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c535
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c606
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c656
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c679
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c739
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c740
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c741
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c742
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c743
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c744
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1191_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1191_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1191
    #define WPP_ANNOTATE_QCMAIN_c1191 WPP_ANNOTATE_QCMAIN_c1191_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1191 WPP_ANNOTATE_QCMAIN_c1191_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1191", L"{", L"msgBuf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1200_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0%10!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1200_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0%10!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1200
    #define WPP_ANNOTATE_QCMAIN_c1200 WPP_ANNOTATE_QCMAIN_c1200_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1200 WPP_ANNOTATE_QCMAIN_c1200_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1200", L"{", L"msgBuf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c122_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0qcusb: Failure at DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c122_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0qcusb: Failure at DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c122
    #define WPP_ANNOTATE_QCMAIN_c122 WPP_ANNOTATE_QCMAIN_c122_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c122 WPP_ANNOTATE_QCMAIN_c122_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c122", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1222_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> AddToFdoCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1222_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> AddToFdoCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1222
    #define WPP_ANNOTATE_QCMAIN_c1222 WPP_ANNOTATE_QCMAIN_c1222_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1222 WPP_ANNOTATE_QCMAIN_c1222_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1222", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdo 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdo 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1240
    #define WPP_ANNOTATE_QCMAIN_c1240 WPP_ANNOTATE_QCMAIN_c1240_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1240 WPP_ANNOTATE_QCMAIN_c1240_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1240", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1268_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdoPtr-0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1268_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdoPtr-0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1268
    #define WPP_ANNOTATE_QCMAIN_c1268 WPP_ANNOTATE_QCMAIN_c1268_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1268 WPP_ANNOTATE_QCMAIN_c1268_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1268", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"cnt, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1284_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> AddToFdoCollection: 0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1284_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> AddToFdoCollection: 0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1284
    #define WPP_ANNOTATE_QCMAIN_c1284 WPP_ANNOTATE_QCMAIN_c1284_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1284 WPP_ANNOTATE_QCMAIN_c1284_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1284", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"cnt, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1303_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0<%10!s!> RemoveFdoFromCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1303_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0<%10!s!> RemoveFdoFromCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1303
    #define WPP_ANNOTATE_QCMAIN_c1303 WPP_ANNOTATE_QCMAIN_c1303_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1303 WPP_ANNOTATE_QCMAIN_c1303_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1303", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1347_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0<%10!s!> RemoveFdoFromCollection failure: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1347_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0<%10!s!> RemoveFdoFromCollection failure: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1347
    #define WPP_ANNOTATE_QCMAIN_c1347 WPP_ANNOTATE_QCMAIN_c1347_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1347 WPP_ANNOTATE_QCMAIN_c1347_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1347", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c159_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0\n<%10!s!> DriverEntry (Build: %11!s!/%12!s!)\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c159_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0\n<%10!s!> DriverEntry (Build: %11!s!/%12!s!)\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c159
    #define WPP_ANNOTATE_QCMAIN_c159 WPP_ANNOTATE_QCMAIN_c159_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemString -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c159 WPP_ANNOTATE_QCMAIN_c159_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c159", L"{", L"gDeviceName, ItemString -- 10" , L"__DATE__, ItemString -- 11" , L"__TIME__, ItemString -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c166_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0\n<%10!s!> DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c166_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0\n<%10!s!> DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c166
    #define WPP_ANNOTATE_QCMAIN_c166 WPP_ANNOTATE_QCMAIN_c166_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c166 WPP_ANNOTATE_QCMAIN_c166_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c166", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c173_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0\n<%10!s!> DriverEntry RegPath:\n   %11!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c173_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0\n<%10!s!> DriverEntry RegPath:\n   %11!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c173
    #define WPP_ANNOTATE_QCMAIN_c173 WPP_ANNOTATE_QCMAIN_c173_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c173 WPP_ANNOTATE_QCMAIN_c173_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c173", L"{", L"gDeviceName, ItemString -- 10" , L"asDevName.Buffer, ItemString -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c190_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0\n<%10!s!> DriverEntry: gServicePath failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c190_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0\n<%10!s!> DriverEntry: gServicePath failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c190
    #define WPP_ANNOTATE_QCMAIN_c190 WPP_ANNOTATE_QCMAIN_c190_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c190 WPP_ANNOTATE_QCMAIN_c190_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c190", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c230_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0\n<%10!s!> MgrThread Failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c230_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0\n<%10!s!> MgrThread Failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c230
    #define WPP_ANNOTATE_QCMAIN_c230 WPP_ANNOTATE_QCMAIN_c230_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c230 WPP_ANNOTATE_QCMAIN_c230_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c230", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c269_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> RmNoti: cannot post!!!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c269_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> RmNoti: cannot post!!!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c269
    #define WPP_ANNOTATE_QCMAIN_c269 WPP_ANNOTATE_QCMAIN_c269_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c269 WPP_ANNOTATE_QCMAIN_c269_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c269", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c308_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> ERROR: IRP STATUS_PENDING\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c308_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> ERROR: IRP STATUS_PENDING\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_CRITICAL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c308
    #define WPP_ANNOTATE_QCMAIN_c308 WPP_ANNOTATE_QCMAIN_c308_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c308 WPP_ANNOTATE_QCMAIN_c308_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c308", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c363_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CleanupDeviceExtension: enter\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c363_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CleanupDeviceExtension: enter\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c363
    #define WPP_ANNOTATE_QCMAIN_c363 WPP_ANNOTATE_QCMAIN_c363_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c363 WPP_ANNOTATE_QCMAIN_c363_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c363", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c378_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> ERR: FDO Chain - 0x%11!p!/0x%12!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c378_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> ERR: FDO Chain - 0x%11!p!/0x%12!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c378
    #define WPP_ANNOTATE_QCMAIN_c378 WPP_ANNOTATE_QCMAIN_c378_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c378 WPP_ANNOTATE_QCMAIN_c378_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c378", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdoPtr, ItemPtr -- 11" , L"DeviceObject, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c535_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> CleanupDeviceExtension: Exit\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c535_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> CleanupDeviceExtension: Exit\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c535
    #define WPP_ANNOTATE_QCMAIN_c535 WPP_ANNOTATE_QCMAIN_c535_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c535 WPP_ANNOTATE_QCMAIN_c535_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c535", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c606_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> CxlWOM: NULL IRP!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c606_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> CxlWOM: NULL IRP!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c606
    #define WPP_ANNOTATE_QCMAIN_c606 WPP_ANNOTATE_QCMAIN_c606_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c606 WPP_ANNOTATE_QCMAIN_c606_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c606", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c656_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> cancelAllIrps - cancel R/W threads\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_INFO", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c656_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> cancelAllIrps - cancel R/W threads\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_INFO", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c656
    #define WPP_ANNOTATE_QCMAIN_c656 WPP_ANNOTATE_QCMAIN_c656_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c656 WPP_ANNOTATE_QCMAIN_c656_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c656", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c679_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0\n<%10!s!> RemoveSymbolicLinks: 0\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c679_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0\n<%10!s!> RemoveSymbolicLinks: 0\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c679
    #define WPP_ANNOTATE_QCMAIN_c679 WPP_ANNOTATE_QCMAIN_c679_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c679 WPP_ANNOTATE_QCMAIN_c679_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c679", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c739_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0   ================================\" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c739_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0   ================================\" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c739
    #define WPP_ANNOTATE_QCMAIN_c739 WPP_ANNOTATE_QCMAIN_c739_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c739 WPP_ANNOTATE_QCMAIN_c739_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c739", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c740_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0     Driver Unloaded by System\" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c740_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0     Driver Unloaded by System\" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c740
    #define WPP_ANNOTATE_QCMAIN_c740 WPP_ANNOTATE_QCMAIN_c740_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c740 WPP_ANNOTATE_QCMAIN_c740_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c740", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c741_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0       Version: %10!-10s!         \" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c741_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0       Version: %10!-10s!         \" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c741
    #define WPP_ANNOTATE_QCMAIN_c741 WPP_ANNOTATE_QCMAIN_c741_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c741 WPP_ANNOTATE_QCMAIN_c741_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c741", L"{", L"gVendorConfig.DriverVersion, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c742_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0       Device:  %10!-10s!         \" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c742_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0       Device:  %10!-10s!         \" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c742
    #define WPP_ANNOTATE_QCMAIN_c742 WPP_ANNOTATE_QCMAIN_c742_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c742 WPP_ANNOTATE_QCMAIN_c742_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c742", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c743_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0       Port:    %10!-50s!\" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c743_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0       Port:    %10!-50s!\" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c743
    #define WPP_ANNOTATE_QCMAIN_c743 WPP_ANNOTATE_QCMAIN_c743_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c743 WPP_ANNOTATE_QCMAIN_c743_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c743", L"{", L"gVendorConfig.PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c744_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0   ================================\" //  ", __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c744_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0   ================================\" //  ", __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c744
    #define WPP_ANNOTATE_QCMAIN_c744 WPP_ANNOTATE_QCMAIN_c744_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c744 WPP_ANNOTATE_QCMAIN_c744_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c744", L"{", L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif

#define WPP_LOCAL_TraceGuids WPP_94c26df784a438b6a7e13372d4772017_Traceguids

#if 1
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x94c26df7,0x84a4,0x38b6,{0xa7,0xe1,0x33,0x72,0xd4,0x77,0x20,0x17}}, };
#endif

#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((SIZE_T)(_Size)),
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( ((_value)?wcslen(_value) + 1:5) * sizeof(WCHAR), (_value)?(_value):L"NULL" )
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x08" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x08, (_x)?(_x)->Buffer:L"NULL" )
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x04" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x04, (_x)?(_x)->Buffer:"NULL" )
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_ENABLE_FLAG_BIT)
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 )) 
#endif

#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def


//
// Generate the WPP_RECORDER_SP_ function    2
//
#ifndef WPP_RECORDER_SF__def
#       define WPP_RECORDER_SF__def
WPP_INLINE
VOID
WPP_RECORDER_SF_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                    0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id,  0);
}
#endif  // #ifndef WPP_RECORDER_SF__def


#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def


//
// Generate the WPP_RECORDER_SP_s function    2
//
#ifndef WPP_RECORDER_SF_s_def
#       define WPP_RECORDER_SF_s_def
WPP_INLINE
VOID
WPP_RECORDER_SF_s(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_s_def


#ifndef WPP_SF_sq_def
#       define WPP_SF_sq_def
WPP_INLINE void WPP_SF_sq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_sq_def


//
// Generate the WPP_RECORDER_SP_sq function    2
//
#ifndef WPP_RECORDER_SF_sq_def
#       define WPP_RECORDER_SF_sq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const void* _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sq_def


#ifndef WPP_SF_sqd_def
#       define WPP_SF_sqd_def
WPP_INLINE void WPP_SF_sqd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2, signed int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(signed int,_a3)  0); }
#endif  // #ifndef WPP_SF_sqd_def


//
// Generate the WPP_RECORDER_SP_sqd function    2
//
#ifndef WPP_RECORDER_SF_sqd_def
#       define WPP_RECORDER_SF_sqd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sqd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const void* _a2, signed int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(signed int,_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(signed int,_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sqd_def


#ifndef WPP_SF_sqq_def
#       define WPP_SF_sqq_def
WPP_INLINE void WPP_SF_sqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_sqq_def


//
// Generate the WPP_RECORDER_SP_sqq function    2
//
#ifndef WPP_RECORDER_SF_sqq_def
#       define WPP_RECORDER_SF_sqq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sqq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const void* _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sqq_def


#ifndef WPP_SF_ss_def
#       define WPP_SF_ss_def
WPP_INLINE void WPP_SF_ss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2)  0); }
#endif  // #ifndef WPP_SF_ss_def


//
// Generate the WPP_RECORDER_SP_ss function    2
//
#ifndef WPP_RECORDER_SF_ss_def
#       define WPP_RECORDER_SF_ss_def
WPP_INLINE
VOID
WPP_RECORDER_SF_ss(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const char* _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGASTR(_a2)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_ss_def


#ifndef WPP_SF_sss_def
#       define WPP_SF_sss_def
WPP_INLINE void WPP_SF_sss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const char* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3)  0); }
#endif  // #ifndef WPP_SF_sss_def


//
// Generate the WPP_RECORDER_SP_sss function    2
//
#ifndef WPP_RECORDER_SF_sss_def
#       define WPP_RECORDER_SF_sss_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sss(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , const char* _a1, const char* _a2, const char* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) && 
       (WPP_CONTROL(flags).Level >= level)) {
        WPP_TRACE( WPP_CONTROL(flags).Logger,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3)  0);

    }
    
    WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3)  0);
}
#endif  // #ifndef WPP_RECORDER_SF_sss_def


#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif


#ifdef WPP_DEBUG
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c739(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c739) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             24,WPP_LOCAL_TraceGuids+0), \
          WPP_DEBUG((MSG)), \
          1:0  \
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c740(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c740) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             25,WPP_LOCAL_TraceGuids+0), \
          WPP_DEBUG((MSG)), \
          1:0  \
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c741(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c741) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             26,WPP_LOCAL_TraceGuids+0, a10), \
          WPP_DEBUG((MSG,a10)), \
          1:0  \
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c742(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c742) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             27,WPP_LOCAL_TraceGuids+0, a10), \
          WPP_DEBUG((MSG,a10)), \
          1:0  \
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c743(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c743) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             28,WPP_LOCAL_TraceGuids+0, a10), \
          WPP_DEBUG((MSG,a10)), \
          1:0  \
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c744(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c744) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             29,WPP_LOCAL_TraceGuids+0), \
          WPP_DEBUG((MSG)), \
          1:0  \
      ))\
     WPP_POST()
#else
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c739(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c739) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             24,WPP_LOCAL_TraceGuids+0), 1:0\
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c740(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c740) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             25,WPP_LOCAL_TraceGuids+0), 1:0\
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c741(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c741) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             26,WPP_LOCAL_TraceGuids+0, a10), 1:0\
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c742(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c742) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             27,WPP_LOCAL_TraceGuids+0, a10), 1:0\
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c743(MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c743) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_s(WPP_RECORDER_ARGS(), \
                             28,WPP_LOCAL_TraceGuids+0, a10), 1:0\
      ))\
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c744(MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c744) \
     ((\
       WPP_RECORDER_FILTER() ? \
        WPP_RECORDER_SF_(WPP_RECORDER_ARGS(), \
                             29,WPP_LOCAL_TraceGuids+0), 1:0\
      ))\
     WPP_POST()
#endif


#ifdef WPP_DEBUG
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1191(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1191) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c1200(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c1200) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 31,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c122(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c122) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 10,WPP_LOCAL_TraceGuids+0 WPP_R MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1222(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1222) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1240) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1268(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1268) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 34,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1284(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1284) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 35,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1303(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1303) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 36,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1347(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1347) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 37,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c159(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c159) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sss(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 11,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c166(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c166) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c173(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c173) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_ss(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 13,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c190(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c190) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c230(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c230) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c269(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c269) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c308(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c308) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c363(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c363) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 18,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c378(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c378) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 19,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c535(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c535) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 20,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c606(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c606) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 21,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c656(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c656) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 22,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c679(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c679) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 23,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#else
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1191(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1191) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c1200(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c1200) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 31,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c122(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c122) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 10,WPP_LOCAL_TraceGuids+0 WPP_R MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1222(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1222) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1240) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1268(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1268) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 34,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1284(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1284) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqd(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 35,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1303(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1303) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 36,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1347(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1347) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 37,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c159(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c159) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_sss(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 11,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c166(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c166) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c173(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c173) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_ss(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 13,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c190(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c190) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c230(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c230) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c269(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c269) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c308(GFLAG, GLEVEL,  MSGARGS) \
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c308) \
            (( \
                WPP_RECORDER_GFLAG_GLEVEL_FILTER(GFLAG, GLEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_GFLAG_GLEVEL_ARGS(GFLAG, GLEVEL), \
                                 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c363(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c363) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 18,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c378(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c378) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_sqq(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 19,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c535(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c535) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 20,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c606(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c606) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 21,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c656(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c656) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 22,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c679(FLAG, LEVEL,  MSGARGS) \
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c679) \
            (( \
                WPP_RECORDER_FLAG_LEVEL_FILTER(FLAG, LEVEL) ? \
                WPP_RECORDER_SF_s(WPP_RECORDER_FLAG_LEVEL_ARGS(FLAG, LEVEL), \
                                 23,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), 1:0  \
            )) \
            WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#endif



#if defined(__cplusplus)
};
#endif


#else
// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1191
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1200
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c122
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1222
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1240
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1268
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1284
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1303
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c1347
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c159
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c166
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c173
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c190
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c230
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c269
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c308
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c363
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c378
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c535
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c606
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c656
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c679
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c739
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c740
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c741
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c742
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c743
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_QCMAIN_c744
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else
#define WPP_FUNC_NAME
#endif

#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1191_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1191_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 30 \"%0%10!s!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1191
    #define WPP_ANNOTATE_QCMAIN_c1191 WPP_ANNOTATE_QCMAIN_c1191_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1191 WPP_ANNOTATE_QCMAIN_c1191_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1191", L"{", L"msgBuf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1200_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0%10!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1200_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 31 \"%0%10!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1200
    #define WPP_ANNOTATE_QCMAIN_c1200 WPP_ANNOTATE_QCMAIN_c1200_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1200 WPP_ANNOTATE_QCMAIN_c1200_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1200", L"{", L"msgBuf, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c122_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0qcusb: Failure at DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c122_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 10 \"%0qcusb: Failure at DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c122
    #define WPP_ANNOTATE_QCMAIN_c122 WPP_ANNOTATE_QCMAIN_c122_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c122 WPP_ANNOTATE_QCMAIN_c122_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c122", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1222_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> AddToFdoCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1222_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 32 \"%0<%10!s!> AddToFdoCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1222
    #define WPP_ANNOTATE_QCMAIN_c1222 WPP_ANNOTATE_QCMAIN_c1222_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1222 WPP_ANNOTATE_QCMAIN_c1222_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1222", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdo 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1240_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 33 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdo 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1240
    #define WPP_ANNOTATE_QCMAIN_c1240 WPP_ANNOTATE_QCMAIN_c1240_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1240 WPP_ANNOTATE_QCMAIN_c1240_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1240", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1268_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdoPtr-0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1268_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 34 \"%0<%10!s!> AddToFdoCollection: NO_MEM for fdoPtr-0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1268
    #define WPP_ANNOTATE_QCMAIN_c1268 WPP_ANNOTATE_QCMAIN_c1268_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1268 WPP_ANNOTATE_QCMAIN_c1268_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1268", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"cnt, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1284_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> AddToFdoCollection: 0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1284_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 35 \"%0<%10!s!> AddToFdoCollection: 0x%11!p! cnt %12!d!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1284
    #define WPP_ANNOTATE_QCMAIN_c1284 WPP_ANNOTATE_QCMAIN_c1284_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemLong -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1284 WPP_ANNOTATE_QCMAIN_c1284_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1284", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"cnt, ItemLong -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1303_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0<%10!s!> RemoveFdoFromCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1303_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 36 \"%0<%10!s!> RemoveFdoFromCollection: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1303
    #define WPP_ANNOTATE_QCMAIN_c1303 WPP_ANNOTATE_QCMAIN_c1303_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1303 WPP_ANNOTATE_QCMAIN_c1303_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1303", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c1347_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0<%10!s!> RemoveFdoFromCollection failure: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c1347_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 37 \"%0<%10!s!> RemoveFdoFromCollection failure: 0x%11!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c1347
    #define WPP_ANNOTATE_QCMAIN_c1347 WPP_ANNOTATE_QCMAIN_c1347_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c1347 WPP_ANNOTATE_QCMAIN_c1347_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c1347", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdo, ItemPtr -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c159_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0\n<%10!s!> DriverEntry (Build: %11!s!/%12!s!)\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c159_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 11 \"%0\n<%10!s!> DriverEntry (Build: %11!s!/%12!s!)\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c159
    #define WPP_ANNOTATE_QCMAIN_c159 WPP_ANNOTATE_QCMAIN_c159_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"Arg, ItemString -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c159 WPP_ANNOTATE_QCMAIN_c159_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c159", L"{", L"gDeviceName, ItemString -- 10" , L"__DATE__, ItemString -- 11" , L"__TIME__, ItemString -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c166_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0\n<%10!s!> DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c166_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 12 \"%0\n<%10!s!> DriverEntry\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c166
    #define WPP_ANNOTATE_QCMAIN_c166 WPP_ANNOTATE_QCMAIN_c166_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c166 WPP_ANNOTATE_QCMAIN_c166_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c166", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c173_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0\n<%10!s!> DriverEntry RegPath:\n   %11!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c173_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 13 \"%0\n<%10!s!> DriverEntry RegPath:\n   %11!s!\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c173
    #define WPP_ANNOTATE_QCMAIN_c173 WPP_ANNOTATE_QCMAIN_c173_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemString -- 11" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c173 WPP_ANNOTATE_QCMAIN_c173_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c173", L"{", L"gDeviceName, ItemString -- 10" , L"asDevName.Buffer, ItemString -- 11" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c190_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0\n<%10!s!> DriverEntry: gServicePath failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c190_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 14 \"%0\n<%10!s!> DriverEntry: gServicePath failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c190
    #define WPP_ANNOTATE_QCMAIN_c190 WPP_ANNOTATE_QCMAIN_c190_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c190 WPP_ANNOTATE_QCMAIN_c190_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c190", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c230_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0\n<%10!s!> MgrThread Failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c230_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 15 \"%0\n<%10!s!> MgrThread Failure\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c230
    #define WPP_ANNOTATE_QCMAIN_c230 WPP_ANNOTATE_QCMAIN_c230_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c230 WPP_ANNOTATE_QCMAIN_c230_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c230", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c269_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> RmNoti: cannot post!!!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c269_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 16 \"%0<%10!s!> RmNoti: cannot post!!!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c269
    #define WPP_ANNOTATE_QCMAIN_c269 WPP_ANNOTATE_QCMAIN_c269_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c269 WPP_ANNOTATE_QCMAIN_c269_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c269", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c308_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> ERROR: IRP STATUS_PENDING\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c308_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 17 \"%0<%10!s!> ERROR: IRP STATUS_PENDING\" //   GFLAG=QCSER_DBG_MASK_CONTROL GLEVEL=QCSER_DBG_LEVEL_CRITICAL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c308
    #define WPP_ANNOTATE_QCMAIN_c308 WPP_ANNOTATE_QCMAIN_c308_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c308 WPP_ANNOTATE_QCMAIN_c308_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c308", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c363_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CleanupDeviceExtension: enter\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c363_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 18 \"%0<%10!s!> CleanupDeviceExtension: enter\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c363
    #define WPP_ANNOTATE_QCMAIN_c363 WPP_ANNOTATE_QCMAIN_c363_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c363 WPP_ANNOTATE_QCMAIN_c363_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c363", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c378_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> ERR: FDO Chain - 0x%11!p!/0x%12!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c378_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 19 \"%0<%10!s!> ERR: FDO Chain - 0x%11!p!/0x%12!p!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c378
    #define WPP_ANNOTATE_QCMAIN_c378 WPP_ANNOTATE_QCMAIN_c378_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"Arg, ItemPtr -- 11" , L"Arg, ItemPtr -- 12" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c378 WPP_ANNOTATE_QCMAIN_c378_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c378", L"{", L"pDevExt->PortName, ItemString -- 10" , L"fdoPtr, ItemPtr -- 11" , L"DeviceObject, ItemPtr -- 12" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c535_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> CleanupDeviceExtension: Exit\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c535_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 20 \"%0<%10!s!> CleanupDeviceExtension: Exit\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c535
    #define WPP_ANNOTATE_QCMAIN_c535 WPP_ANNOTATE_QCMAIN_c535_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c535 WPP_ANNOTATE_QCMAIN_c535_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c535", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c606_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> CxlWOM: NULL IRP!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c606_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 21 \"%0<%10!s!> CxlWOM: NULL IRP!\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_ERROR" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c606
    #define WPP_ANNOTATE_QCMAIN_c606 WPP_ANNOTATE_QCMAIN_c606_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c606 WPP_ANNOTATE_QCMAIN_c606_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c606", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c656_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> cancelAllIrps - cancel R/W threads\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_INFO" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c656_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 22 \"%0<%10!s!> cancelAllIrps - cancel R/W threads\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_INFO" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c656
    #define WPP_ANNOTATE_QCMAIN_c656 WPP_ANNOTATE_QCMAIN_c656_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c656 WPP_ANNOTATE_QCMAIN_c656_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c656", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c679_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0\n<%10!s!> RemoveSymbolicLinks: 0\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c679_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 23 \"%0\n<%10!s!> RemoveSymbolicLinks: 0\" //   FLAG=QCSER_DBG_MASK_CONTROL LEVEL=QCSER_DBG_LEVEL_DETAIL" WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c679
    #define WPP_ANNOTATE_QCMAIN_c679 WPP_ANNOTATE_QCMAIN_c679_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c679 WPP_ANNOTATE_QCMAIN_c679_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c679", L"{", L"pDevExt->PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c739_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0   ================================\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c739_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 24 \"%0   ================================\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c739
    #define WPP_ANNOTATE_QCMAIN_c739 WPP_ANNOTATE_QCMAIN_c739_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c739 WPP_ANNOTATE_QCMAIN_c739_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c739", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c740_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0     Driver Unloaded by System\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c740_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 25 \"%0     Driver Unloaded by System\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c740
    #define WPP_ANNOTATE_QCMAIN_c740 WPP_ANNOTATE_QCMAIN_c740_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c740 WPP_ANNOTATE_QCMAIN_c740_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c740", L"{", L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c741_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0       Version: %10!-10s!         \" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c741_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 26 \"%0       Version: %10!-10s!         \" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c741
    #define WPP_ANNOTATE_QCMAIN_c741 WPP_ANNOTATE_QCMAIN_c741_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c741 WPP_ANNOTATE_QCMAIN_c741_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c741", L"{", L"gVendorConfig.DriverVersion, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c742_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0       Device:  %10!-10s!         \" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c742_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 27 \"%0       Device:  %10!-10s!         \" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c742
    #define WPP_ANNOTATE_QCMAIN_c742 WPP_ANNOTATE_QCMAIN_c742_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c742 WPP_ANNOTATE_QCMAIN_c742_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c742", L"{", L"gDeviceName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c743_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0       Port:    %10!-50s!\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c743_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 28 \"%0       Port:    %10!-50s!\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c743
    #define WPP_ANNOTATE_QCMAIN_c743 WPP_ANNOTATE_QCMAIN_c743_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"Arg, ItemString -- 10" , L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c743 WPP_ANNOTATE_QCMAIN_c743_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c743", L"{", L"gVendorConfig.PortName, ItemString -- 10" , L"}")
#endif
#if !defined(WPP_USER_MSG_GUID)
# define WPP_ANNOTATE_QCMAIN_c744_FINAL(P, File, Name, ...)    __annotation(L ## P, L"94c26df7-84a4-38b6-a7e1-3372d4772017 serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0   ================================\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#else
# define WPP_ANNOTATE_QCMAIN_c744_FINAL(P, File, Name, ...)    __annotation(L ## P, WPP_GUID_WTEXT WPP_USER_MSG_GUID L"serial // SRC=" _WPPW(File) L" MJ= MN=", L"#typev "  _WPPW(Name) L" 29 \"%0   ================================\" //  " WPP_FUNC_NAME, __VA_ARGS__)
#endif

#ifdef WPP_PUBLIC_ANNOT_QCMAIN_c744
    #define WPP_ANNOTATE_QCMAIN_c744 WPP_ANNOTATE_QCMAIN_c744_FINAL("TMF:", "Unknown_cxx00", "Unknown_cxx00", L"{", L"}", L"PUBLIC_TMF:")
                                        
    #ifndef WPP_PUBLIC_TMC
        #define WPP_PUBLIC_TMC
    #endif
#else
    #define WPP_ANNOTATE_QCMAIN_c744 WPP_ANNOTATE_QCMAIN_c744_FINAL("TMF:", "QCMAIN.c", "QCMAIN_c744", L"{", L"}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#else
# define WPP_ANNOTATE(x)
#endif


#if 1
#if !defined(WPP_USER_MSG_GUID)

#define WPP_LOCAL_TraceGuids WPP_94c26df784a438b6a7e13372d4772017_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0x94c26df7,0x84a4,0x38b6,{0xa7,0xe1,0x33,0x72,0xd4,0x77,0x20,0x17}}, };

#else

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#endif
#endif


#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif

#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( ((_value)?wcslen(_value) + 1:5) * sizeof(WCHAR), (_value)?(_value):L"NULL" )
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x08" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x08, (_x)?(_x)->Buffer:L"NULL" )
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x)?&(_x)->Length:L"\x04" ) \
                          WPP_LOGPAIR( (_x)?(_x)->Length:0x04, (_x)?(_x)->Buffer:"NULL" )
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_CHECK_INIT)
# define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && 
#endif


#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def
#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def
#ifndef WPP_SF_sq_def
#       define WPP_SF_sq_def
WPP_INLINE void WPP_SF_sq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2)  0); }
#endif  // #ifndef WPP_SF_sq_def
#ifndef WPP_SF_sqd_def
#       define WPP_SF_sqd_def
WPP_INLINE void WPP_SF_sqd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2, signed int _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(signed int,_a3)  0); }
#endif  // #ifndef WPP_SF_sqd_def
#ifndef WPP_SF_sqq_def
#       define WPP_SF_sqq_def
WPP_INLINE void WPP_SF_sqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const void* _a2, const void* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(const void*,_a2) WPP_LOGTYPEVAL(const void*,_a3)  0); }
#endif  // #ifndef WPP_SF_sqq_def
#ifndef WPP_SF_ss_def
#       define WPP_SF_ss_def
WPP_INLINE void WPP_SF_ss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2)  0); }
#endif  // #ifndef WPP_SF_ss_def
#ifndef WPP_SF_sss_def
#       define WPP_SF_sss_def
WPP_INLINE void WPP_SF_sss(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1, const char* _a2, const char* _a3)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGASTR(_a2) WPP_LOGASTR(_a3)  0); }
#endif  // #ifndef WPP_SF_sss_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif

#ifndef WPP_LOG_ALWAYS
#  define WPP_LOG_ALWAYS(...)
#endif      

#ifdef WPP_DEBUG
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c739(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c739) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LOGGER() 24, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c740(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c740) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LOGGER() 25, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c741(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c741) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LOGGER() 26, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c742(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c742) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LOGGER() 27, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c743(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c743) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LOGGER() 28, \
                             WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c744(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG)\
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c744) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LOGGER() 29, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#else
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c739(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c739) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_(WPP_LOGGER() 24, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c740(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c740) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_(WPP_LOGGER() 25, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c741(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c741) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_s(WPP_LOGGER() 26, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c742(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c742) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_s(WPP_LOGGER() 27, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c743(MSG,a10) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG,a10) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c743) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_s(WPP_LOGGER() 28, \
                               WPP_LOCAL_TraceGuids+0, a10), 1:0  \
     ) ) \
     WPP_POST()
#ifndef WPP_POST
#  define WPP_POST()
#endif
#ifndef WPP_PRE
#  define WPP_PRE()
#endif
#define WPP_CALL_QCMAIN_c744(MSG) \
     WPP_LOG_ALWAYS(WPP_EX(),MSG) \
     WPP_PRE() \
     WPP_ANNOTATE(QCMAIN_c744) \
     ( ( \
         WPP_CHECK_INIT WPP_ENABLED() ? \
            WPP_SF_(WPP_LOGGER() 29, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_POST()
#endif


#ifdef WPP_DEBUG
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1191(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1191) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c1200(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c1200) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 31,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c122(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c122) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 10,WPP_LOCAL_TraceGuids+0 WPP_R MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1222(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1222) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1240) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1268(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1268) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sqd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 34,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1284(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1284) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sqd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 35,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1303(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1303) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 36,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1347(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1347) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 37,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c159(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c159) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_sss(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 11,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c166(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c166) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c173(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c173) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_ss(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 13,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c190(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c190) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c230(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c230) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c269(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c269) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c308(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL),MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c308) \
            (( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)? \
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c363(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c363) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 18,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c378(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c378) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_sqq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 19,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c535(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c535) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 20,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c606(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c606) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 21,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c656(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c656) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 22,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c679(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL),MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c679) \
            (( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)? \
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 23,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS), \
                WPP_DEBUG(MSGARGS),1:0 \
             )) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#else
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1191(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1191) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 30,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c1200(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c1200) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 31,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c122(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c122) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 10,WPP_LOCAL_TraceGuids+0 WPP_R MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1222(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1222) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 32,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1240(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1240) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 33,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1268(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1268) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sqd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 34,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1284(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1284) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sqd(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 35,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1303(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1303) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 36,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c1347(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c1347) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 37,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c159(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c159) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_sss(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 11,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c166(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c166) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 12,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c173(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c173) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_ss(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 13,WPP_LOCAL_TraceGuids+0 WPP_R01 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c190(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c190) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 14,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c230(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c230) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 15,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c269(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c269) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 16,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_GFLAG_GLEVEL_POST
#  define WPP_GFLAG_GLEVEL_POST(GFLAG,GLEVEL)
#endif
#ifndef WPP_GFLAG_GLEVEL_PRE
#  define WPP_GFLAG_GLEVEL_PRE(GFLAG,GLEVEL)
#endif
#define WPP_CALL_QCMAIN_c308(GFLAG, GLEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_GFLAG_GLEVEL(GFLAG, GLEVEL), MSGARGS)\
            WPP_GFLAG_GLEVEL_PRE(GFLAG, GLEVEL) \
            WPP_ANNOTATE(QCMAIN_c308) \
            ( \
                WPP_CHECK_INIT  WPP_GFLAG_GLEVEL_ENABLED(GFLAG, GLEVEL)?\
                WPP_SF_s(WPP_GFLAG_GLEVEL_LOGGER(GFLAG, GLEVEL) 17,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_GFLAG_GLEVEL_POST(GFLAG, GLEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c363(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c363) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 18,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c378(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c378) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_sqq(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 19,WPP_LOCAL_TraceGuids+0 WPP_R012 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c535(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c535) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 20,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c606(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c606) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 21,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c656(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c656) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 22,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#ifndef WPP_FLAG_LEVEL_POST
#  define WPP_FLAG_LEVEL_POST(FLAG,LEVEL)
#endif
#ifndef WPP_FLAG_LEVEL_PRE
#  define WPP_FLAG_LEVEL_PRE(FLAG,LEVEL)
#endif
#define WPP_CALL_QCMAIN_c679(FLAG, LEVEL,  MSGARGS) \
            WPP_LOG_ALWAYS(WPP_EX_FLAG_LEVEL(FLAG, LEVEL), MSGARGS)\
            WPP_FLAG_LEVEL_PRE(FLAG, LEVEL) \
            WPP_ANNOTATE(QCMAIN_c679) \
            ( \
                WPP_CHECK_INIT  WPP_FLAG_LEVEL_ENABLED(FLAG, LEVEL)?\
                WPP_SF_s(WPP_FLAG_LEVEL_LOGGER(FLAG, LEVEL) 23,WPP_LOCAL_TraceGuids+0 WPP_R0 MSGARGS),\
                1:0 \
             ) \
             WPP_FLAG_LEVEL_POST(FLAG, LEVEL)
#endif



#if defined(__cplusplus)
};
#endif

#endif

#define WPPINIT_EXPORT 
  // template km-init.tpl

//
//     Defines a set of functions that simplifies
//     kernel mode registration for tracing
//

#pragma warning(disable: 4201)
#include <ntddk.h>

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WppDebug)
#define WppDebug(a,b)
#endif


WPPINIT_EXPORT
VOID
WppInitGlobalLogger(
    _In_ LPCGUID ControlGuid,
    _Out_ PTRACEHANDLE LoggerHandle,
    _Out_ PULONG Flags,
    _Out_ PUCHAR Level 
    );


WPPINIT_EXPORT
VOID 
WppInitKm(
    _When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject,
    _When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PCUNICODE_STRING RegPath
    );

#if ENABLE_WPP_RECORDER
WPPINIT_EXPORT
VOID 
WppAutoLogStart(
    _In_ WPP_CB_TYPE * WppCb,
    _In_ PDRIVER_OBJECT DrvObj,
    _In_ PCUNICODE_STRING RegPath
    );

VOID 
WppAutoLogStop(
    _In_ WPP_CB_TYPE * WppCb,
    _In_ PDRIVER_OBJECT DrvObj
    );    

VOID
imp_WppRecorderReplay(
    _In_ PVOID       WppCb,
    _In_ TRACEHANDLE WppTraceHandle,
    _In_ ULONG       EnableFlags,
    _In_ UCHAR       EnableLevel
    );

#ifndef ENABLE_WPP_RECORDER_REPLAY
#define ENABLE_WPP_RECORDER_REPLAY 1
#endif
#endif    

#ifdef ALLOC_PRAGMA
    #pragma alloc_text( PAGE, WppLoadTracingSupport)
    #pragma alloc_text( PAGE, WppInitGlobalLogger)
    #pragma alloc_text( PAGE, WppTraceCallback)
    #pragma alloc_text( PAGE, WppInitKm)
    #pragma alloc_text( PAGE, WppCleanupKm)
#endif // ALLOC_PRAGMA

// define annotation record that will carry control information to pdb (in case somebody needs it)
WPP_FORCEINLINE void WPP_CONTROL_ANNOTATION() {
#if !defined(WPP_NO_ANNOTATIONS)
#ifndef WPP_TMC_ANNOT_SUFIX
#ifdef WPP_PUBLIC_TMC
    #define WPP_TMC_ANNOT_SUFIX ,L"PUBLIC_TMF:"
#else
    #define WPP_TMC_ANNOT_SUFIX
#endif
#endif

#  define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) __annotation(L"TMC:", WPP_GUID_WTEXT Guid, _WPPW(WPP_STRINGIZE(Name)) Bits WPP_TMC_ANNOT_SUFIX);
#  define WPP_DEFINE_BIT(Name) , _WPPW(#Name)
    WPP_CONTROL_GUIDS 
#  undef WPP_DEFINE_BIT
#  undef WPP_DEFINE_CONTROL_GUID
#endif
}


#define WPP_NEXT(Name) ((WPP_TRACE_CONTROL_BLOCK*) \
    (WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) + 1 == WPP_LAST_CTL ? 0:WPP_MAIN_CB + WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) + 1))    

#if ENABLE_WPP_RECORDER
#define INIT_WPP_RECORDER(Arr)                  \
   Arr->Control.AutoLogContext = NULL;          \
   Arr->Control.AutoLogVerboseEnabled = 0x0;    \
   Arr->Control.AutoLogAttachToMiniDump = 0x0;                         
#else
#define INIT_WPP_RECORDER(Arr)
#endif

WPP_CB_TYPE WPP_MAIN_CB[WPP_LAST_CTL];

__inline void WPP_INIT_CONTROL_ARRAY(WPP_CB_TYPE* Arr) {
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits)                                         \
   Arr->Control.Callback = NULL;                                                        \
   Arr->Control.ControlGuid = WPP_XGLUE4(&WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name));    \
   Arr->Control.Next = WPP_NEXT(WPP_EVAL(Name));                                        \
   Arr->Control.RegistryPath= NULL;                                                     \
   Arr->Control.FlagsLen = WPP_FLAG_LEN;                                                \
   Arr->Control.Level = 0;                                                              \
   Arr->Control.Reserved = 0;                                                           \
   Arr->Control.Flags[0] = 0;                                                           \
   INIT_WPP_RECORDER(Arr)                                                               \
   ++Arr;
#define WPP_DEFINE_BIT(BitName) L" " L ## #BitName
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID
}


#undef WPP_INIT_STATIC_DATA
#define WPP_INIT_STATIC_DATA WPP_INIT_CONTROL_ARRAY(WPP_MAIN_CB)



// define WPP_INIT_TRACING.  For performance reasons turn off during
// static analysis compilation with Static Driver Verifier (SDV).
#ifndef _SDV_
#define WPP_INIT_TRACING(DriverObject, RegPath)                             \
    {                                                                       \
      WppDebug(0,("WPP_INIT_TRACING: &WPP_CB[0] %p\n", &WPP_MAIN_CB[0]));   \
      WPP_INIT_STATIC_DATA;                                                 \
      WppLoadTracingSupport();                                              \
      ( WPP_CONTROL_ANNOTATION(),                                           \
        WPP_MAIN_CB[0].Control.RegistryPath = NULL,                         \
        WppInitKm( (PDRIVER_OBJECT)DriverObject, RegPath )                  \
      );                                                                    \
    }
#else
#define WPP_INIT_TRACING(DriverObject, RegPath)
#endif
    
#define WMIREG_FLAG_CALLBACK  0x80000000 // not exposed in DDK

#ifndef WMIREG_FLAG_TRACE_PROVIDER
#define WMIREG_FLAG_TRACE_PROVIDER          0x00010000
#endif

//
// Public routines to break down the Loggerhandle
//

#if !defined(KERNEL_LOGGER_ID)
#define KERNEL_LOGGER_ID                      0xFFFF    // USHORT only 
#endif

typedef struct _WPP_TRACE_ENABLE_CONTEXT {
    USHORT  LoggerId;           // Actual Id of the logger
    UCHAR   Level;              // Enable level passed by control caller
    UCHAR   InternalFlag;       // Reserved
    ULONG   EnableFlags;        // Enable flags passed by control caller
} WPP_TRACE_ENABLE_CONTEXT, *PWPP_TRACE_ENABLE_CONTEXT;

#if !defined(WmiGetLoggerId)
#define WmiGetLoggerId(LoggerContext) \
    (((PWPP_TRACE_ENABLE_CONTEXT) (&LoggerContext))->LoggerId == \
        (USHORT)KERNEL_LOGGER_ID) ? \
        KERNEL_LOGGER_ID : \
        ((PWPP_TRACE_ENABLE_CONTEXT) (&LoggerContext))->LoggerId

#define WmiGetLoggerEnableFlags(LoggerContext) \
   ((PWPP_TRACE_ENABLE_CONTEXT) (&LoggerContext))->EnableFlags
#define WmiGetLoggerEnableLevel(LoggerContext) \
    ((PWPP_TRACE_ENABLE_CONTEXT) (&LoggerContext))->Level
#endif

#ifndef WPPINIT_EXPORT
#define WPPINIT_EXPORT
#endif

#define WppIsEqualGuid(G1, G2)(RtlCompareMemory(G1, G2, sizeof(GUID)) == sizeof(GUID))


VOID
WppLoadTracingSupport(
    VOID
    )
/*++

Routine Description:

    This function assigns at runtime the ETW API set to be use for tracing.
    
Arguments:
    
Remarks:

    At runtime determine assing the funtions pointers for the trace APIs to be use. 
    XP and above will use TraceMessage, and Win2K is not supported.

--*/
{
    ULONG MajorVersion = 0;
    UNICODE_STRING name;

    PAGED_CODE();

    RtlInitUnicodeString(&name, L"PsGetVersion");       
    pfnWppGetVersion = (PFN_WPPGETVERSION) (INT_PTR) 
        MmGetSystemRoutineAddress(&name);

    RtlInitUnicodeString(&name, L"WmiTraceMessage");
    pfnWppTraceMessage = (PFN_WPPTRACEMESSAGE) (INT_PTR) 
        MmGetSystemRoutineAddress(&name);


    //
    // WinXp
    //

    RtlInitUnicodeString(&name, L"WmiQueryTraceInformation");
    pfnWppQueryTraceInformation = (PFN_WPPQUERYTRACEINFORMATION) (INT_PTR) 
        MmGetSystemRoutineAddress(&name);
    WPPTraceSuite = WppTraceWinXP;

    //
    // Server08
    //

    if (pfnWppGetVersion != NULL) {
        pfnWppGetVersion(&MajorVersion,
                         NULL,
                         NULL,
                         NULL);
    }

    if (MajorVersion >= 6) {

        RtlInitUnicodeString(&name, L"EtwRegisterClassicProvider");
        pfnEtwRegisterClassicProvider = (PFN_ETWREGISTERCLASSICPROVIDER) (INT_PTR) 
            MmGetSystemRoutineAddress(&name);

        if (pfnEtwRegisterClassicProvider != NULL) {
            //
            // For Vista SP1 and later
            //
            RtlInitUnicodeString(&name, L"EtwUnregister");
            pfnEtwUnregister = (PFN_ETWUNREGISTER) (INT_PTR) 
                MmGetSystemRoutineAddress(&name);
        
            WPPTraceSuite = WppTraceServer08;
        }
    }
}


#ifdef WPP_GLOBALLOGGER
#define DEFAULT_GLOBAL_LOGGER_KEY       L"WMI\\GlobalLogger\\"
#define WPP_TEXTGUID_LEN 38
#define GREGVALUENAMELENGTH (18 + WPP_TEXTGUID_LEN) // wslen(L"WMI\\GlobalLogger\\") + GUIDLENGTH

WPPINIT_EXPORT
VOID
WppInitGlobalLogger(
    _In_ LPCGUID ControlGuid,
    _Out_ PTRACEHANDLE LoggerHandle,
    _Out_ PULONG Flags,
    _Out_ PUCHAR Level 
    )
{
WCHAR                      GRegValueName[GREGVALUENAMELENGTH]; 
RTL_QUERY_REGISTRY_TABLE   Parms[3];
ULONG                      CurrentFlags = 0;
ULONG                      CurrentLevel = 0;
ULONG                      Start = 0;
NTSTATUS                   Status;
ULONG                      Zero = 0;
UNICODE_STRING             GuidString;  


   PAGED_CODE();
    
   WppDebug(0,("WPP checking Global Logger\n"));
   

   //
   // Fill in the query table to find out if the Global Logger is Started
   //
   // Trace Flags
      Parms[0].QueryRoutine  = NULL;
      Parms[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
      Parms[0].Name          = L"Start";
      Parms[0].EntryContext  = &Start;
      Parms[0].DefaultType   = REG_DWORD;
      Parms[0].DefaultData   = &Zero;
      Parms[0].DefaultLength = sizeof(ULONG);
      // Termination
      Parms[1].QueryRoutine  = NULL;
      Parms[1].Flags         = 0;
   //
   // Perform the query
   //

   Status = RtlQueryRegistryValues(RTL_REGISTRY_CONTROL | RTL_REGISTRY_OPTIONAL,
                                   DEFAULT_GLOBAL_LOGGER_KEY,
                                   Parms,
                                   NULL,
                                   NULL);
    if (!NT_SUCCESS(Status) || Start == 0 ) {  
        return;
    }

    // Fill in the query table to find out if we should use the Global logger
    //
    // Trace Flags
      Parms[0].QueryRoutine  = NULL;
      Parms[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
      Parms[0].Name          = L"Flags";
      Parms[0].EntryContext  = &CurrentFlags;
      Parms[0].DefaultType   = REG_DWORD;
      Parms[0].DefaultData   = &Zero;
      Parms[0].DefaultLength = sizeof(ULONG);
      // Trace level
      Parms[1].QueryRoutine  = NULL;
      Parms[1].Flags         = RTL_QUERY_REGISTRY_DIRECT;
      Parms[1].Name          = L"Level";
      Parms[1].EntryContext  = &CurrentLevel;
      Parms[1].DefaultType   = REG_DWORD;
      Parms[1].DefaultData   = &Zero;
      Parms[1].DefaultLength = sizeof(UCHAR);
      // Termination
      Parms[2].QueryRoutine  = NULL;
      Parms[2].Flags         = 0;


      RtlCopyMemory(GRegValueName, DEFAULT_GLOBAL_LOGGER_KEY,  (wcslen(DEFAULT_GLOBAL_LOGGER_KEY)+1) *sizeof(WCHAR));

 
#if defined(__cplusplus)
      Status = RtlStringFromGUID(*ControlGuid, &GuidString);
#else
      Status = RtlStringFromGUID(ControlGuid, &GuidString);
#endif

      if( Status != STATUS_SUCCESS ) {
        WppDebug(0,("WPP GlobalLogger failed RtlStringFromGUID \n"));
        return;
      }

      if (GuidString.Length > (WPP_TEXTGUID_LEN * sizeof(WCHAR))){
        WppDebug(0,("WPP GlobalLogger RtlStringFromGUID  too large\n"));
        RtlFreeUnicodeString(&GuidString);
        return;
      }
        
      // got the GUID in form "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"   
      // need GUID in form "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      // copy the translated GUID string 
      
      RtlCopyMemory(&GRegValueName[(ULONG)wcslen(GRegValueName)], &GuidString.Buffer[1], GuidString.Length);
      GRegValueName[(ULONG)wcslen(GRegValueName) - 1] = L'\0';  
      RtlFreeUnicodeString(&GuidString);

   //
   // Perform the query
   //

   Status = RtlQueryRegistryValues(RTL_REGISTRY_CONTROL | RTL_REGISTRY_OPTIONAL,
                                   GRegValueName,
                                   Parms,
                                   NULL,
                                   NULL);
   if (NT_SUCCESS(Status)) {
        if (Start==1) {
           *LoggerHandle= WMI_GLOBAL_LOGGER_ID;
           *Flags = CurrentFlags & 0x7FFFFFFF;
           *Level = (UCHAR)(CurrentLevel & 0xFF);
           WppDebug(0,("WPP Enabled via Global Logger Flags=0x%08X Level=0x%02X\n",CurrentFlags,CurrentLevel));

        }
   } else {
        WppDebug(0,("WPP GlobalLogger has No Flags/Levels Status=%08X\n",Status));
   }                                    
}
#endif  //#ifdef WPP_GLOBALLOGGER

#define WPP_MAX_COUNT_REGISTRATION_GUID 63

WPPINIT_EXPORT
NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    )
/*++

Routine Description:

    This function is the callback WMI calls when we register and when our
    events are enabled or disabled.

Arguments:

    MinorFunction - specifies the type of callback (register, event enable/disable)
    
    DataPath - varies depending on the ActionCode
    
    BufferLength - size of the Buffer parameter
    
    Buffer - in/out buffer where we read from or write to depending on the type
        of callback
        
    Context - the pointer private struct WPP_TRACE_CONTROL_BLOCK
        
    Size - output parameter to receive the amount of data written into Buffer

Return Value:

    NTSTATUS code indicating success/failure

Comments:

    if return value is STATUS_BUFFER_TOO_SMALL and BufferLength >= 4,
    then first ulong of buffer contains required size


--*/

{
    PWPP_TRACE_CONTROL_BLOCK    cntl;
    NTSTATUS                    Status = STATUS_SUCCESS;

    UNREFERENCED_PARAMETER(DataPath);


    PAGED_CODE();

    
    WppDebug(0,("WppTraceCallBack 0x%08X %p\n", MinorFunction, Context));
    
    *Size = 0;

    switch(MinorFunction)
    {
        case IRP_MN_REGINFO:
        {
            PWMIREGINFOW     WmiRegInfo;
            PCUNICODE_STRING RegPath;
            PWCHAR           StringPtr;
            ULONG            RegistryPathOffset;
            ULONG            BufferNeeded;
            ULONG            GuidCount = 0;

            //
            // Initialize locals 
            //

            cntl = (PWPP_TRACE_CONTROL_BLOCK)Context;
            WmiRegInfo = (PWMIREGINFO)Buffer;
            
            RegPath = cntl->RegistryPath;

            //
            // Count the number of guid to be identified.
            //
            while(cntl) { GuidCount++; cntl = cntl->Next; }
            
            if (GuidCount > WPP_MAX_COUNT_REGISTRATION_GUID){
                Status = STATUS_INVALID_PARAMETER;
                break;            
            }
            
            WppDebug(0,("WppTraceCallBack: GUID count %d\n", GuidCount)); 

            //
            // Calculate buffer size need to hold all info.
            // Calculate offset to where RegistryPath parm will be copied.
            //
            
            if (RegPath == NULL)
            {

                RegistryPathOffset = 0;

                BufferNeeded = FIELD_OFFSET(WMIREGINFOW, WmiRegGuid) + 
                               GuidCount * sizeof(WMIREGGUIDW);
                
            } else {

                RegistryPathOffset = FIELD_OFFSET(WMIREGINFOW, WmiRegGuid) + 
                                     GuidCount * sizeof(WMIREGGUIDW);

                BufferNeeded = RegistryPathOffset +
                               RegPath->Length + sizeof(USHORT);
            }            

            //
            // If the provided buffer is large enough, then fill with info.
            //
            
            if (BufferNeeded <= BufferLength)
            {
                ULONG  i;

                RtlZeroMemory(Buffer, BufferLength);

                //
                // Fill in the WMIREGINFO
                //
                
                WmiRegInfo->BufferSize   = BufferNeeded;
                WmiRegInfo->RegistryPath = RegistryPathOffset;
                WmiRegInfo->GuidCount    = GuidCount;

                if (RegPath != NULL) {
                    StringPtr    = (PWCHAR)((PUCHAR)Buffer + RegistryPathOffset);
                    *StringPtr++ = RegPath->Length;
                    
                    RtlCopyMemory(StringPtr, RegPath->Buffer, RegPath->Length);
                }

                //
                // Fill in the WMIREGGUID
                //

                cntl = (PWPP_TRACE_CONTROL_BLOCK) Context;

                for (i=0; i<GuidCount; i++) {

                    WmiRegInfo->WmiRegGuid[i].Guid  = *cntl->ControlGuid;  
                    WmiRegInfo->WmiRegGuid[i].Flags = WMIREG_FLAG_TRACE_CONTROL_GUID | 
                                                      WMIREG_FLAG_TRACED_GUID;
                    cntl->Level = 0;
                    cntl->Flags[0] = 0;
                    WppDebug(0,("Control GUID::%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x\n",
                                cntl->ControlGuid->Data1,
                                cntl->ControlGuid->Data2,
                                cntl->ControlGuid->Data3,
                                cntl->ControlGuid->Data4[0],
                                cntl->ControlGuid->Data4[1],
                                cntl->ControlGuid->Data4[2],
                                cntl->ControlGuid->Data4[3],
                                cntl->ControlGuid->Data4[4],
                                cntl->ControlGuid->Data4[5],
                                cntl->ControlGuid->Data4[6],
                                cntl->ControlGuid->Data4[7]
                        )); 
                    
                    cntl = cntl->Next;
                }

                Status = STATUS_SUCCESS;
                *Size  = BufferNeeded;

            } else {
                Status = STATUS_BUFFER_TOO_SMALL;

                if (BufferLength >= sizeof(ULONG)) {
                    *((PULONG)Buffer) = BufferNeeded;
                    *Size = sizeof(ULONG);
                }
            }

#ifdef WPP_GLOBALLOGGER
            // Check if Global logger is active            
            
            cntl = (PWPP_TRACE_CONTROL_BLOCK) Context;
            while(cntl) {
                WppInitGlobalLogger(
                                    cntl->ControlGuid,
                                    (PTRACEHANDLE)&cntl->Logger,
                                    &cntl->Flags[0],
                                    &cntl->Level);
                cntl = cntl->Next;                    
            }
#endif  //#ifdef WPP_GLOBALLOGGER
            
            break;
        }

        case IRP_MN_ENABLE_EVENTS:
        case IRP_MN_DISABLE_EVENTS:
        {
            PWNODE_HEADER             Wnode;
            ULONG                     Level;
            ULONG                     ReturnLength;
            ULONG                     index;

            if (Context == NULL ) {
                Status = STATUS_WMI_GUID_NOT_FOUND;
                break;
            }

            if (BufferLength < sizeof(WNODE_HEADER)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            //
            // Initialize locals 
            //
            Wnode = (PWNODE_HEADER)Buffer;
            
            //
            // Traverse this ProjectControlBlock's ControlBlock list and 
            // find the "cntl" ControlBlock which matches the Wnode GUID.
            //
            cntl  = (PWPP_TRACE_CONTROL_BLOCK) Context;
            index = 0;
            while(cntl) { 
                if (WppIsEqualGuid(cntl->ControlGuid, &Wnode->Guid )) {
                    break;
                }
                index++;
                cntl = cntl->Next; 
            }

            if (cntl == NULL) {
                Status = STATUS_WMI_GUID_NOT_FOUND;
                break;
            }

            //
            // Do the requested event action
            //
            Status = STATUS_SUCCESS;

            if (MinorFunction == IRP_MN_DISABLE_EVENTS) {

                WppDebug(0,("WppTraceCallBack: DISABLE_EVENTS\n")); 

                cntl->Level    = 0;
                cntl->Flags[0] = 0;
                cntl->Logger   = 0;

            } else {

                TRACEHANDLE  lh;

                lh = (TRACEHANDLE)( Wnode->HistoricalContext );
                cntl->Logger = lh;

                if (WppTraceWinXP == WPPTraceSuite) {

                    Status = pfnWppQueryTraceInformation( TraceEnableLevelClass,
                                                          &Level,
                                                          sizeof(Level),
                                                          &ReturnLength,
                                                          (PVOID) Wnode );

                    if (Status == STATUS_SUCCESS) {
                        cntl->Level = (UCHAR)Level;
                    }

                    Status = pfnWppQueryTraceInformation( TraceEnableFlagsClass,
                                                          &cntl->Flags[0],
                                                          sizeof(cntl->Flags[0]),
                                                          &ReturnLength,
                                                          (PVOID) Wnode );

                } else {
                    cntl->Flags[0] = ((PWPP_TRACE_ENABLE_CONTEXT) &lh)->EnableFlags;
                    cntl->Level = (UCHAR) ((PWPP_TRACE_ENABLE_CONTEXT) &lh)->Level;
                }

                WppDebug(0,("WppTraceCallBack: ENABLE_EVENTS "
                            "LoggerId %d, Flags 0x%08X, Level 0x%02X\n",
                            (USHORT) cntl->Logger,
                            cntl->Flags[0],
                            cntl->Level));

            }

#ifdef WPP_PRIVATE_ENABLE_CALLBACK
            //
            // Notify changes to flags, level for GUID
            //
                WPP_PRIVATE_ENABLE_CALLBACK( cntl->ControlGuid, 
                                             cntl->Logger, 
                                             (MinorFunction != IRP_MN_DISABLE_EVENTS) ? TRUE:FALSE,
                                             cntl->Flags[0],
                                             cntl->Level );
#endif 

            break;
        }
        
        case IRP_MN_ENABLE_COLLECTION:
        case IRP_MN_DISABLE_COLLECTION:
        {
            Status = STATUS_SUCCESS;
            break;
        }

        case IRP_MN_QUERY_ALL_DATA:
        case IRP_MN_QUERY_SINGLE_INSTANCE:
        case IRP_MN_CHANGE_SINGLE_INSTANCE:
        case IRP_MN_CHANGE_SINGLE_ITEM:
        case IRP_MN_EXECUTE_METHOD:
        {
            Status = STATUS_INVALID_DEVICE_REQUEST;
            break;
        }

        default:
        {
            Status = STATUS_INVALID_DEVICE_REQUEST;
            break;
        }

    }
    return(Status);
}

VOID 
NTAPI
WppClassicProviderCallback(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _Inout_ PVOID CallbackContext
    )

/*++

Routine Description:

    Enable callback function when EtwRegisterClassicProvider was used.
    It happens in Windows Vista SP1 and newer.

Arguments:

    Guid - provider guid.

    ControlCode -  code indicating operations request.

    EnableContext - context from the ETW infrastructure.

    CallbackContext - context from the user.

Return Value:

    None.

--*/

{
    PWPP_TRACE_CONTROL_BLOCK TraceCb = (PWPP_TRACE_CONTROL_BLOCK)CallbackContext;
    PWPP_TRACE_ENABLE_CONTEXT TraceContext = (PWPP_TRACE_ENABLE_CONTEXT)EnableContext;
    
    UNREFERENCED_PARAMETER (Guid);

    WppDebug(0,("WppClassicProviderCallback %d\n", (int)ControlCode));

    //
    // Only handle enable and disable operations.
    //

    if ((ControlCode != EVENT_CONTROL_CODE_ENABLE_PROVIDER) &&
        (ControlCode != EVENT_CONTROL_CODE_DISABLE_PROVIDER)) {
        
        return;
    }

    if (ControlCode != EVENT_CONTROL_CODE_DISABLE_PROVIDER) {
        TraceCb->Flags[0] = TraceContext->EnableFlags;
        TraceCb->Level = (UCHAR)TraceContext->Level;
        TraceCb->Logger = *((TRACEHANDLE*)TraceContext);

#if ENABLE_WPP_RECORDER 
#if ENABLE_WPP_RECORDER_REPLAY && (NTDDI_VERSION >= NTDDI_WIN10_RS1)
        imp_WppRecorderReplay(&WPP_CB[0], TraceCb->Logger, TraceContext->EnableFlags, TraceContext->Level);
#endif
#endif //#if ENABLE_WPP_RECORDER 

        WppDebug(0,("ENABLE: LoggerId=%d Flags=%08x Level=%02d\n", (int)TraceContext->LoggerId, TraceCb->Flags[0], TraceCb->Level));
    } else {
        TraceCb->Level = 0;
        TraceCb->Flags[0] = 0;
        TraceCb->Logger = 0;
    }

#ifdef WPP_PRIVATE_ENABLE_CALLBACK
    //
    // Notify changes to flags, level for GUID
    //
    WppDebug(0,("WppClassicProviderCallback: calling private callback.\n"));

    WPP_PRIVATE_ENABLE_CALLBACK(TraceCb->ControlGuid, 
                                TraceCb->Logger, 
                                ControlCode,
                                TraceCb->Flags[0],
                                TraceCb->Level);
#endif

}
    

#pragma warning(push)
#pragma warning(disable:4068)
WPPINIT_EXPORT
VOID 
WppInitKm(
    _When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject,
    _When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PCUNICODE_STRING RegPath
    )

/*++

Routine Description:

    This function registers a driver with ETW as a provider of trace
    events from the defined GUIDs.
    
Arguments:

    DriverObject - Pointer to a driver object. This is required for WppRecorder
                   and is optional otherwise (not used unless it's for
                   WppRecorder).

    RegPath - Optional pointer to registry path, needed for wpp recorder.
    
Remarks:

   This function is called by the WPP_INIT_TRACING(DriverObject, RegPath) macro.
    
--*/
    
{
    C_ASSERT(WPP_MAX_FLAG_LEN_CHECK); 

    NTSTATUS Status;
    PWPP_TRACE_CONTROL_BLOCK WppReg = NULL;

    PAGED_CODE();

    UNREFERENCED_PARAMETER(DriverObject);
    UNREFERENCED_PARAMETER(RegPath);
    
    if (WPP_CB != WPP_MAIN_CB) {

        WPP_CB = WPP_MAIN_CB;

    } else {
      //
      // WPP_INIT_TRACING allready called
      //
      WppDebug(0,("Warning : WPP_INIT_TRACING already called, ignoring this one"));
      return;
    }

    WppReg = &WPP_CB[0].Control;

    WppDebug(0,("WPP Init.\n"));

    if (WppTraceServer08 == WPPTraceSuite) {

        //
        // Windows version >= Vista SP1
        //      
        while (WppReg) {

            WppReg->RegHandle = 0;
            Status = pfnEtwRegisterClassicProvider(
                WppReg->ControlGuid, 
                0, 
                WppClassicProviderCallback, 
                (PVOID)WppReg, 
                &WppReg->RegHandle);

            if (!NT_SUCCESS(Status)) {
                WppDebug(0,("EtwRegisterClassicProvider Status = %d, ControlBlock = %p.\n", Status, WppReg));
            }
            
            WppReg = WppReg->Next;
        }        

    } else if (WppTraceWinXP == WPPTraceSuite) {

        
        WppReg -> Callback = WppTraceCallback;

#pragma prefast(suppress:__WARNING_BANNED_API_ARGUMENT_USAGE, "WPP generated, requires legacy providers");
        Status = IoWMIRegistrationControl(
                                    (PDEVICE_OBJECT)WppReg,
                                    WMIREG_ACTION_REGISTER  | 
                                    WMIREG_FLAG_CALLBACK    |
                                    WMIREG_FLAG_TRACE_PROVIDER
                                    );        

        if (!NT_SUCCESS(Status)) {
            WppDebug(0,("IoWMIRegistrationControl Status = %08X\n",Status));
        }
        
    }

#if ENABLE_WPP_RECORDER
    WppAutoLogStart(&WPP_CB[0], DriverObject, RegPath);
#endif

}

WPPINIT_EXPORT
VOID 
WppCleanupKm(
    _When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject
    )

/*++

Routine Description:

    This function deregisters a driver from ETW as provider of trace
    events.
    
Arguments:

    DriverObject - Pointer to a driver object. This is required for WppRecorder
                   and is optional otherwise (not used unless it's for
                   WppRecorder).

Remarks:

    This function is called by the WPP_CLEANUP(DriverObject) macro.
        
--*/

{
    UNREFERENCED_PARAMETER(DriverObject);

    PAGED_CODE();
    
    if (WPP_CB == (WPP_CB_TYPE*)&WPP_CB){
        //
        // WPP_INIT_TRACING macro has not been called
        //
        WppDebug(0,("Warning : WPP_CLEANUP already called, or called with out WPP_INIT_TRACING first"));
        return;
    }

    if (WppTraceServer08 == WPPTraceSuite) {

        PWPP_TRACE_CONTROL_BLOCK WppReg = &WPP_CB[0].Control;

        while (WppReg) {
            if (WppReg->RegHandle) {
                pfnEtwUnregister(WppReg->RegHandle);    
                WppDebug(0,("EtwUnregister RegHandle = %lld.\n",WppReg->RegHandle));
            } else {
                WppDebug(0,("WppCleanupKm: invalid RegHandle.\n"));
            }
            WppReg = WppReg->Next;
        }

    } else if (WppTraceWinXP == WPPTraceSuite) {
        PWPP_TRACE_CONTROL_BLOCK WppReg = &WPP_CB[0].Control;

        IoWMIRegistrationControl(   (PDEVICE_OBJECT)WppReg, 
                                    WMIREG_ACTION_DEREGISTER | 
                                    WMIREG_FLAG_CALLBACK );
                                    
    }
    
#if ENABLE_WPP_RECORDER    
        WppAutoLogStop(&WPP_CB[0], DriverObject);
#endif    

    WPP_CB = (WPP_CB_TYPE*)&WPP_CB;
}

#pragma warning(pop)

#define WPP_SYSTEMCONTROL(PDO)
#define WPP_SYSTEMCONTROL2(PDO, offset)

#if defined(__cplusplus)
};
#endif

//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DbgPrint
#define DbgPrint WPP_(CALL)
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef KdPrint
#define KdPrint(ARGS) WPP_(CALL) ARGS
// MsgArgs

#undef QCSER_DbgPrint
#define QCSER_DbgPrint(FLAG, LEVEL,  MSGARGS) WPP_(CALL)(FLAG, LEVEL,  MSGARGS)
#undef QCSER_DbgPrintG
#define QCSER_DbgPrintG(GFLAG, GLEVEL,  MSGARGS) WPP_(CALL)(GFLAG, GLEVEL,  MSGARGS)
#undef QCSER_DbgPrintX
#define QCSER_DbgPrintX(X, XFLAG, XLEVEL,  MSGARGS) WPP_(CALL)(X, XFLAG, XLEVEL,  MSGARGS)
#undef  WPP_R
#define WPP_R(MSG) 
#undef  WPP_R0
#define WPP_R0(MSG, a0) , a0
#undef  WPP_R01
#define WPP_R01(MSG, a0, a1) , a0, a1
#undef  WPP_R012
#define WPP_R012(MSG, a0, a1, a2) , a0, a1, a2
#undef  WPP_R0123
#define WPP_R0123(MSG, a0, a1, a2, a3) , a0, a1, a2, a3
#undef  WPP_R01234
#define WPP_R01234(MSG, a0, a1, a2, a3, a4) , a0, a1, a2, a3, a4
#undef  WPP_R0123456
#define WPP_R0123456(MSG, a0, a1, a2, a3, a4, a5, a6) , a0, a1, a2, a3, a4, a5, a6
#undef  WPP_R01234567
#define WPP_R01234567(MSG, a0, a1, a2, a3, a4, a5, a6, a7) , a0, a1, a2, a3, a4, a5, a6, a7
#undef  WPP_R012345678
#define WPP_R012345678(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8) , a0, a1, a2, a3, a4, a5, a6, a7, a8
#undef  WPP_R0123456789
#define WPP_R0123456789(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9
#undef  WPP_R0123456789ab
#define WPP_R0123456789ab(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11
#undef  WPP_R0123456789abc
#define WPP_R0123456789abc(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12
#undef  WPP_R0123456789abcd
#define WPP_R0123456789abcd(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13
#undef  WPP_R0a0b0c0d0e0f000102030405060708090a0b
#define WPP_R0a0b0c0d0e0f000102030405060708090a0b(MSG, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) , a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17
